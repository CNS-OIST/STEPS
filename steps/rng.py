# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _rng
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Err(_object):
    """Proxy of C++ Err class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Err, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Err, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> Err
        __init__(self) -> Err
        """
        this = _rng.new_Err(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMsg(*args):
        """getMsg(self) -> char"""
        return _rng.Err_getMsg(*args)

    __swig_destroy__ = _rng.delete_Err
    __del__ = lambda self : None;
Err_swigregister = _rng.Err_swigregister
Err_swigregister(Err)

class ArgErr(Err):
    """Proxy of C++ ArgErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArgErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> ArgErr
        __init__(self) -> ArgErr
        """
        this = _rng.new_ArgErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rng.delete_ArgErr
    __del__ = lambda self : None;
ArgErr_swigregister = _rng.ArgErr_swigregister
ArgErr_swigregister(ArgErr)

class NotImplErr(Err):
    """Proxy of C++ NotImplErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> NotImplErr
        __init__(self) -> NotImplErr
        """
        this = _rng.new_NotImplErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rng.delete_NotImplErr
    __del__ = lambda self : None;
NotImplErr_swigregister = _rng.NotImplErr_swigregister
NotImplErr_swigregister(NotImplErr)

class RNG(_object):
    """
    Proxy of C++ random number generator.


    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RNG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RNG, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rng.delete_RNG
    __del__ = lambda self : None;
    def initialize(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_initialize(*args)

    def get(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_get(*args)

    def getUnfII(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getUnfII(*args)

    def getUnfIE(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getUnfIE(*args)

    def getUnfEE(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getUnfEE(*args)

    def getUnfIE53(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getUnfIE53(*args)

    def getStdExp(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getStdExp(*args)

    def getExp(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getExp(*args)

    def getPsn(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getPsn(*args)

    def getStdNrm(*args):
        """
        Initialize the random number generator with given seed value.


        Syntax::
            
            initialize(seed)
            
        Arguments:
            uint seed

        Return:
            None

        """
        return _rng.RNG_getStdNrm(*args)

RNG_swigregister = _rng.RNG_swigregister
RNG_swigregister(RNG)


def create_mt19937(*args):
  """
    Equivalent to: create('mt19937', buffer_size)

    Syntax::

        create_mt19937(buffer_size)
        
    Arguments:
        uint buffer_size

    Return:
        steps.rng.RNG

    """
  return _rng.create_mt19937(*args)

def create(*args):
  """
    Creates and returns a reference to a steps.rng.RNG random number generator object, 
    which is specified by type and pre-allocates a buffer list with size of buffer_size.

    Syntax::
        
        create(type, buffer_size)

    Arguments:
        * string type
        * uint buffer_size

    Return:
        steps.rng.RNG

    """
  return _rng.create(*args)


