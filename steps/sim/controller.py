# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# STEPS - STochastic Engine for Pathway Simulation
# Copyright (C) 2005-2007 Stefan Wils. All rights reserved.
#
# This file is part of STEPS.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA
#
# $Id$
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


"""
Note:

We've currently decided to implement a lot of functionality in these Python
classes, because we believe that during real simulations (as opposed to
simple toy problem test cases) the bulk of time is spent in the computational
routines. The efficiency overhead generated by implementing so much in Python 
functions should therefore be small.

If it would turn out to be a real problem, we can use for instance template
programming to 'offshore' the fancy code in C++.
"""


import steps.error as serr


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


class FuncCore(object):
    
    """This class implements the core functionality of a solver module.
    """
    
    
    def _rsf(self, funcname):
        """Resolve a function, specified by funcname, in the solver module.
        
        RETURNS:
            A pointer to the function.
        
        RAISES:
            steps.error.SolverInterfaceError    
                If the function name cannot be resolved.
        """
        f = self._solver_module.__dict__.get(funcname)
        if f == None:
            raise serr.SolverCoreError, \
                'Function \'%s\' not available in solver \'%s\'' \
                % (funcname, self._solver_module.__name__)
        return f
    
    
    def __init__(self, solver_module, model, geom, rng):
        """Initialize class FuncCore.
        
        Arguments:
            solver_module
                A reference to the actual solver module (usually a SWIG
                generated module with the name ending in '_core'.
            model
                A valid steps.model.Model object, describing the kinetic
                properties of the simulation.
            geom
                A valid steps.geom.Geom object (or one of its derived
                objects), describing the geometry of the simulation.
            rng
                A steps.rng.RNG object. We decided to include this in 
                the core functionality, because even deterministic 
                solvers might need random numbers for some tasks.
            
        RAISES:
            steps.error.SolverInterfaceError
                If something went wrong with communicating with the solver 
                core interface.
        """
        
        # Copy a refence to the solver core module.
        self._solver_module = solver_module
        
        # Resolve core module functions of the solver interface.
        #
        # TODO: maybe there's a less type-intensive way of doing this...
        # On the other hand, this code should not change too often, so
        # maybe it's not worth investing time in making this more 
        # sophisticated.
        self._siGetSolverName = self._rsf('siGetSolverName')
        self._siGetSolverDesc = self._rsf('siGetSolverDesc')
        self._siGetSolverAuthors = self._rsf('siGetSolverAuthors')
        self._siGetSolverEmail = self._rsf('siGetSolverEmail')
        self._siNewState = self._rsf('siNewState')
        self._siDelState = self._rsf('siDelState')
        self._siBeginStateDef = self._rsf('siBeginStateDef')
        self._siEndStateDef = self._rsf('siEndStateDef')
        self._siSetRNG = self._rsf('siSetRNG')
        self._siBeginVarDef = self._rsf('siBeginVarDef')
        self._siEndVarDef = self._rsf('siEndVarDef')
        self._siNewSpec = self._rsf('siNewSpec')
        self._siBeginReacDef = self._rsf('siBeginReacDef')
        self._siEndReacDef = self._rsf('siEndReacDef')
        self._siNewReac = self._rsf('siNewReac')
        self._siAddReacLHS = self._rsf('siAddReacLHS')
        self._siAddReacRHS = self._rsf('siAddReacRHS')
        self._siBeginDiffDef = self._rsf('siBeginDiffDef')
        self._siEndDiffDef = self._rsf('siEndDiffDef')
        self._siNewDiff = self._rsf('siNewDiff')
        self._siBeginSReacDef = self._rsf('siBeginSReacDef')
        self._siEndSReacDef = self._rsf('siEndSReacDef')
        self._siNewSReac = self._rsf('siNewSReac')
        self._siAddSReacLHS_I = self._rsf('siAddSReacLHS_I')
        self._siAddSReacLHS_S = self._rsf('siAddSReacLHS_S')
        self._siAddSReacLHS_O = self._rsf('siAddSReacLHS_O')
        self._siAddSReacRHS_I = self._rsf('siAddSReacRHS_I')
        self._siAddSReacRHS_S = self._rsf('siAddSReacRHS_S')
        self._siAddSReacRHS_O = self._rsf('siAddSReacRHS_O')
        self._siBeginCompDef = self._rsf('siBeginCompDef')
        self._siEndCompDef = self._rsf('siEndCompDef')
        self._siNewComp = self._rsf('siNewComp')
        self._siAddCompSpec = self._rsf('siAddCompSpec')
        self._siAddCompReac = self._rsf('siAddCompReac')
        self._siAddCompDiff = self._rsf('siAddCompDiff')
        self._siBeginPatchDef = self._rsf('siBeginPatchDef')
        self._siEndPatchDef = self._rsf('siEndPatchDef')
        self._siNewPatch = self._rsf('siNewPatch')
        self._siAddPatchSpec = self._rsf('siAddPatchSpec')
        self._siAddPatchSReac = self._rsf('siAddPatchSReac')
        self._siReset = self._rsf('siReset')
        self._siRun = self._rsf('siRun')
        self._siGetTime = self._rsf('siGetTime')
        self._siGetCompVol = self._rsf('siGetCompVol')
        self._siSetCompVol = self._rsf('siSetCompVol')
        self._siGetCompCount = self._rsf('siGetCompCount')
        self._siSetCompCount = self._rsf('siSetCompCount')
        self._siGetCompMass = self._rsf('siGetCompMass')
        self._siSetCompMass = self._rsf('siSetCompMass')
        self._siGetCompConc = self._rsf('siGetCompConc')
        self._siSetCompConc = self._rsf('siSetCompConc')
        self._siGetCompClamped = self._rsf('siGetCompClamped')
        self._siSetCompClamped = self._rsf('siSetCompClamped')
        self._siGetCompReacK = self._rsf('siGetCompReacK')
        self._siSetCompReacK = self._rsf('siSetCompReacK')
        self._siGetCompReacActive = self._rsf('siGetCompReacActive')
        self._siSetCompReacActive = self._rsf('siSetCompReacActive')
        self._siGetCompDiffD = self._rsf('siGetCompDiffD')
        self._siSetCompDiffD = self._rsf('siSetCompDiffD')
        self._siGetCompDiffActive = self._rsf('siGetCompDiffActive')
        self._siSetCompDiffActive = self._rsf('siSetCompDiffActive')
        self._siGetPatchArea = self._rsf('siGetPatchArea')
        self._siSetPatchArea = self._rsf('siSetPatchArea')
        self._siGetPatchCount = self._rsf('siGetPatchCount')
        self._siSetPatchCount = self._rsf('siSetPatchCount')
        self._siGetPatchMass = self._rsf('siGetPatchMass')
        self._siSetPatchMass = self._rsf('siSetPatchMass')
        self._siGetPatchClamped = self._rsf('siGetPatchClamped')
        self._siSetPatchClamped = self._rsf('siSetPatchClamped')
        self._siGetPatchSReacK = self._rsf('siGetPatchSReacK')
        self._siSetPatchSReacK = self._rsf('siSetPatchSReacK')
        self._siGetPatchSReacActive = self._rsf('siGetPatchSReacActive')
        self._siSetPatchSReacActive = self._rsf('siSetPatchSReacActive')

        # Now, attempt to create a state.
        self._state = self._siNewState()
        self._siSetRNG(self._state, rng)
        
        # Setup phase. Pass the model and geometric structure to the
        # the simulator, allow it to define a state.
        # TODO: re-organize this w.r.t. child class
        self._siBeginStateDef(self._state)
        
        # Setup species. 
        self._lut_specs = { }
        self._lut_specnames = { }
        self._setupVars(model)
        
        # Initialize: declare all reaction channels. 
        self._lut_reacs = { }
        self._lut_reacnames = { }
        self._setupReacs(model)
        
        # Initialize: declare all diffusion rules.
        self._lut_diffs = { }
        self._lut_diffnames = { }
        self._setupDiffs(model)
        
        # Initialize: declare all surface reaction rules.
        self._lut_sreacs = { }
        self._lut_sreacnames = { }
        self._setupSReacs(model)
        
        # Initialize: declare all compartments.
        self._lut_comps = { }
        self._lut_compnames = { }
        self._setupComps(model, geom)
        
        # Initialize: declare all patches.
        self._lut_patches = { }
        self._lut_patchnames = { }
        self._setupPatches(model, geom)
        
        # Finish the state definition, create actual state(?)
        # Get ready for simulation.
        # TODO: again, reorganize (think about mesh and stuff)
        self._siEndStateDef(self._state)
    
    
    def __del__(self):
        self._siDelState(self._state)
        self._state = None

    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def _spec(self, spec):
        """Resolve a user-specified reference to a species into its 
        global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the species cannot be found.
        
        Arguments:
            spec
                A reference to the species: the global index or its name.
        
        RETURNS:
            The global index of the species.
            
        RAISES:
            steps.error.ArgumentError
                The species cannot be resolved.
        """
        if isinstance(spec, basestring):
            spec = self._lut_specs[spec]
        if spec == None:
            raise serr.ArgumentError, 'Cannot find species.'
        return spec


    def _specName(self, spec_gidx):
        """Return the name of some species, given its global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        specname = self._lut_specnames[spec_gidx]
        if specname == None:
            raise serr.ProgramError, \
                'Cannot find species with gidx %d.' % spec_gidx
        return specname
        

    def _reac(self, reac):
        """Resolve a user-specified reference to a reaction into its 
        global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the reaction cannot be found.
        
        Arguments:
            spec
                A reference to the reaction: the global index or its name.
        
        RETURNS:
            The global index of the reaction.
            
        RAISES:
            steps.error.ArgumentError
                The reaction cannot be resolved.
        """
        if isinstance(reac, basestring):
            reac = self._lut_reacs[reac]
        if reac == None:
            raise serr.ArgumentError, 'Cannot find reaction.'
        return reac


    def _reacName(self, reac_gidx):
        """Return the name of some reaction channel, given its global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        reacname = self._lut_reacnames[reac_gidx]
        if reacname == None:
            raise serr.ProgramError, \
                'Cannot find reaction with gidx %d.' % reac_gidx
        return reacname
        

    def _diff(self, diff):
        """Resolve a user-specified reference to a diffusion rule into its 
        global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the reaction cannot be found.
        
        Arguments:
            spec
                A reference to the diffusion: the global index or its name.
        
        RETURNS:
            The global index of the diffusion rule.
            
        RAISES:
            steps.error.ArgumentError
                The diffusion rule cannot be resolved.
        """
        if isinstance(diff, basestring):
            diff = self._lut_diffs[diff]
        if diff == None:
            raise serr.ArgumentError, 'Cannot find diffusion rule.'
        return diff


    def _diffName(self, diff_gidx):
        """Return the name of some diffusion rule, given its global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        diffname = self._lut_diffnames[diff_gidx]
        if diffname == None:
            raise serr.ProgramError, \
                'Cannot find diffusion rule with gidx %d.' % diff_gidx
        return diffname
    
    
    def _sreac(self, sreac):
        """Resolve a user-specified reference to a surface reaction rule into  
        its global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the reaction cannot be found.
        
        Arguments:
            spec
                A reference to the sreaction: the global index or its name.
        
        RETURNS:
            The global index of the surface reaction rule.
            
        RAISES:
            steps.error.ArgumentError
                The surface reaction rule cannot be resolved.
        """
        if isinstance(sreac, basestring):
            sreac = self._lut_sreacs[sreac]
        if sreac == None:
            raise serr.ArgumentError, 'Cannot find surface reaction rule.'
        return sreac


    def _sreacName(self, sreac_gidx):
        """Return the name of some surface reaction rule, given its 
        global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        sreacname = self._lut_sreacnames[sreac_gidx]
        if sreacname == None:
            raise serr.ProgramError, \
                'Cannot find surface reaction rule with gidx %d.' % sreac_gidx
        return sreacname
    

    def _comp(self, comp):
        """Resolve a user-specified reference to a compartment into its 
        global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the compartment cannot be found.
        
        Arguments:
            spec
                A reference to the compartment: the global index or its name.
        
        RETURNS:
            The global index of the compartment.
        
        RAISES:
            steps.error.ArgumentError
                The compartment cannot be resolved.
        """
        if isinstance(comp, basestring):
            comp = self._lut_comps[comp]
        if comp == None:
            raise serr.ArgumentError, 'Cannot find compartment.'
        return comp
        
    
    def _compName(self, comp_gidx):
        """Return the name of some compartment, given its global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        compname = self._lut_compnames[comp_gidx]
        if compname == None:
            raise serr.ProgramError, \
                'Cannot find compartment with gidx %d.' % comp_gidx
        return compname
    
    
    def _patch(self, patch):
        """Resolve a user-specified reference to a patch into its 
        global index.
        
        This global index can be used for communicating with the solver 
        core. The method should not typically be called by users.
        
        However, because it's almost always called to work on a 
        user-specified value, it will still raise an ArgumentError 
        rather than a ProgramError when the patch cannot be found.
        
        Arguments:
            spec
                A reference to the patch: the global index or its name.
        
        RETURNS:
            The global index of the patch.
        
        RAISES:
            steps.error.ArgumentError
                The patch cannot be resolved.
        """
        if isinstance(patch, basestring):
            patch = self._lut_patches[patch]
        if patch == None:
            raise serr.ArgumentError, 'Cannot find patch.'
        return patch
        
    
    def _patchName(self, patch_gidx):
        """Return the name of some patch, given its global index.
        
        RAISES:
            steps.error.ProgramError
                When the global index does not exist.
        """
        patchname = self._lut_patchnames[patch_gidx]
        if patchname == None:
            raise serr.ProgramError, \
                'Cannot find patch with gidx %d.' % patch_gidx
        return patchname
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def _setupVars(self, model):
        """Add all field variables defined in the model to solver state.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something wrong.
        """
        self._siBeginVarDef(self._state)
        for s in model.getAllSpecs():
            sid = s.id
            sidx = self._siNewSpec(self._state, sid)
            if self._lut_specnames.has_key(sidx):
                raise serr.SolverCoreError, \
                    'When adding species \'%s\', solver ' + \
                    '\'%s\' returned global index %d, which is already ' + \
                    'used by species \'%s\'.' \
                    % ( sid, self.solvername, sidx, self._lut_specnames[sidx] )
            self._lut_specs[sid] = sidx
            self._lut_specnames[sidx] = sid
        self._siEndVarDef(self._state)
	
    
    def _setupReacs(self, model):
        """Add all reactions defined in the model to solver state.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something stoopid.
        """
        self._siBeginReacDef(self._state)
        for vsys in model.getAllVolsys():
            for reac in vsys.getAllReacs():
                # First, declare the reaction channel itself.
                rid = reac.id
                ridx = self._siNewReac(self._state, rid, reac.kcst)
                if self._lut_reacnames.has_key(ridx):
                    raise serr.SolverCoreError, \
                        'When adding reaction \'%s\', solver ' + \
                        'module \'%s\' returned global index %d, which ' + \
                        'is already used by reaction \'%s\'.' \
                        % ( rid, self.solvername, \
                        ridx, self._lut_reacnames[ridx] )
                self._lut_reacs[rid] = ridx
                self._lut_reacnames[ridx] = rid
                
                # Then copy the stochiometry.
                for lhs in reac.lhs:
                    self._siAddReacLHS(self._state, \
                        ridx, self._spec(lhs.id))
                for rhs in reac.rhs:
                    self._siAddReacRHS(self._state, \
                        ridx, self._spec(rhs.id))
        self._siEndReacDef(self._state)
    
    
    def _setupDiffs(self, model):
        """Add all diffusion rules defined in the model to solver state.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something stupid.
        """
        self._siBeginDiffDef(self._state)
        for vsys in model.getAllVolsys():
            for diff in vsys.getAllDiffs():
                did = diff.id
                lidx = self._spec(diff.lig.id)
                didx = self._siNewDiff(self._state, did, lidx, diff.dcst)
                if self._lut_diffnames.has_key(didx):
                    raise serr.SolverCoreError, \
                        'When adding diffusion rule \'%s\', solver ' + \
                        'module \'%s\' returned global index %d, which ' + \
                        'is already used by diffusion rule \'%s\'.' \
                        % ( did, self.solvername, \
                        didx, self._lut_diffnames[didx] )
                self._lut_diffs[did] = didx
                self._lut_diffnames[didx] = did
        self._siEndDiffDef(self._state)
    
    
    def _setupSReacs(self, model):
        """Add all surface reactions defined in the model to solver state.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something dunb.
        """
        self._siBeginSReacDef(self._state)
        for ssys in model.getAllSurfsys():
            for sreac in ssys.getAllSReacs():
                # First, declare the reaction channel itself.
                rid = sreac.id
                ridx = self._siNewSReac(self._state, rid, sreac.kcst, \
                    sreac.inner)
                if self._lut_sreacnames.has_key(ridx):
                    raise serr.SolverCoreError, \
                        'When adding sreaction \'%s\', solver ' + \
                        'module \'%s\' returned global index %d, which ' + \
                        'is already used by sreaction \'%s\'.' \
                        % ( rid, self.solvername, \
                        ridx, self._lut_sreacnames[ridx] )
                self._lut_sreacs[rid] = ridx
                self._lut_sreacnames[ridx] = rid
                
                # Then copy the stochiometry.
                if sreac.inner == True:
                    vlhs_f = self._siAddSReacLHS_I
                else:
                    vlhs_f = self._siAddSReacLHS_O
                for vlhs in sreac.vlhs:
                    vlhs_f(self._state, ridx, self._spec(vlhs.id))
                for slhs in sreac.slhs:
                    self._siAddSReacLHS_S(self._state, \
                        ridx, self._spec(slhs.id))
                
                for irhs in sreac.irhs:
                    self._siAddSReacRHS_I(self._state, \
                        ridx, self._spec(irhs.id))
                for srhs in sreac.srhs:
                    self._siAddSReacRHS_S(self._state, \
                        ridx, self._spec(srhs.id))
                for orhs in sreac.orhs:
                    self._siAddSReacRHS_O(self._state, \
                        ridx, self._spec(orhs.id))
            
        self._siEndSReacDef(self._state)
    
    
    def _setupComps(self, model, geom):
        """Add all compartments defined in the geometry to the solver 
        state. All volsys references in the compartments are resolved,
        by looking them up in the model.
        
        Arguments:
            model
                A valid steps.model.Model object.
            geom
                A valid steps.geom.Geom object; any reference to volume
                systems made in the geom object must be resolvable in
                the steps.model.Model object.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something wrong.
        """
        self._siBeginCompDef(self._state)
        for c in geom.getAllComps():
            # First, declare the compartment itself.
            cid = c.id
            cidx = self._siNewComp(self._state, cid, c.vol)
            if self._lut_compnames.has_key(cidx):
                raise serr.SolverCoreError, \
                    'When adding compartment \'%s\', solver ' + \
                    '\'%s\' returned global index %d, which is already ' + \
                    'used by compartment \'%s\'.' \
                    % ( cid, self.solvername, cidx, self._lut_compnames[cidx] )
            self._lut_comps[cid] = cidx
            self._lut_compnames[cidx] = cid
            
            # Loop over all volume systems, and resolve them.
            for vsys in c.volsys:
                # Find the Volsys object with the given name.
                vsys = model.getVolsys(vsys)
                # Add species.
                for spec in vsys.getAllSpecs():
                    self._siAddCompSpec(self._state, \
                        cidx, self._spec(spec.id))
                # Add reaction channels.
                for reac in vsys.getAllReacs():
                    self._siAddCompReac(self._state, \
                        cidx, self._reac(reac.id))
                # Add diffusion rules.
                for diff in vsys.getAllDiffs():
                    self._siAddCompDiff(self._state, \
                        cidx, self._diff(diff.id))
        self._siEndCompDef(self._state)
    
    
    def _setupPatches(self, model, geom):
        """Add all patches defined in the geometry to the solver 
        state. All surfsys references in the compartments are resolved,
        by looking them up in the model.
        
        Arguments:
            model
                A valid steps.model.Model object.
            geom
                A valid steps.geom.Geom object; any reference to volume
                systems made in the geom object must be resolvable in
                the steps.model.Model object.
        
        RAISES:
            steps.error.SolverCoreError
                When the solver core module does something wrong.
        """
        self._siBeginPatchDef(self._state)
        for p in geom.getAllPatches():
            # First, declare the patch itself.
            c_i_idx = 0xFFFF;
            if p.icomp is not None:
                c_i_idx = self._comp(p.icomp.id)
            c_o_idx = 0xFFFF;
            if p.ocomp is not None:
                c_o_idx = self._comp(p.ocomp.id)
            pid = p.id
            pidx = self._siNewPatch(self._state, pid, p.area, c_i_idx, c_o_idx)
            if self._lut_patchnames.has_key(pidx):
                raise serr.SolverCoreError, \
                    'When adding patch \'%s\', solver ' + \
                    '\'%s\' returned global index %d, which is already ' + \
                    'used by patch \'%s\'.' \
                    % ( pid, self.solvername, pidx, self._lut_patchnames[pidx] )
            self._lut_patches[pid] = pidx
            self._lut_patchnames[pidx] = pid
            
            # Loop over all surface systems, and resolve them.
            for ssys in p.surfsys:
                # Find the Surfsys object with the given name.
                ssys = model.getSurfsys(ssys)
                # Add species.
                for spec in ssys.getAllSpecs():
                    self._siAddPatchSpec(self._state, \
                        pidx, self._spec(spec.id))
                # Add surface reaction channels.
                for sreac in ssys.getAllSReacs():
                    self._siAddPatchSReac(self._state, \
                        cidx, self._sreac(sreac.id))
        self._siEndPatchDef(self._state)
        
        
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #

    
    def getSolverName(self):
        """Return the name of the solver, as specified in the core module.
        """
        return self._siGetSolverName()
    
    solvername = property(getSolverName)
    
    
    def getSolverDesc(self):
        """Return a short description of the solver, as specified in the
        core module.
        """
        return self._siGetSolverDesc()
    
    solverdesc = property(getSolverDesc)
    
    
    def getSolverAuthors(self):
        """Return the authors of the solver, as specified in the core module.
        """
        return self._siGetSolverAuthors()
    
    solverauthors = property(getSolverAuthors)
    
    
    def getSolverEmail(self):
        """Return an email address at which the solver authors can be
        contacted. Specified in the core module.
        """
        return self._siGetSolverEmail()
    
    solveremail = property(getSolverEmail)
    

	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def reset(self):
        """Reset the simulation state.
        
        All state variables are set to their default initial values. Time 
        is set to zero. This method should be called prior to a new 
        simulation run, or to clean up from a prior simulation.
        
        This method should never fail.
        """
        self._siReset(self._state)
		

    def run(self, endtime):
        """Forward the simulation until the specified time is reached.
        
        When this time has been reached, the simulation is interrupted
        and control returns to the caller.
        
        RAISES:
            steps.error.ArgumentError
                When the specified endtime is smaller than the current time.
        """
        curtime = self.getTime()
        if (endtime < curtime):
            raise serr.ArgumentError, \
                'Cannot run to %f (< current time %f)' \
                % (endtime, curtime)
        if (endtime == curtime):
            return
        self._siRun(self._state, endtime)
        assert endtime == self.getTime(), \
            'Simulation stopped at %f, instead of %f' \
            % (self.getTime(), endtime)


	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getTime(self):
        """Return the current simulation time.
        """
        return self._siGetTime(self._state)

    time = property(getTime)

		
	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
	
    
    def getCompVol(self, comp):
        """Return the volume of a compartment (in m^3).
        
        Arguments:
            comp
                The compartment, identified by name or global index.
        """
        comp = self._comp(comp)
        vol = self._siGetCompVol(self._state, comp)
        assert vol >= 0.0, 'Volume of \'%s\' is negative (%f).' \
            % ( self._compName(comp), vol)
        return vol
    
    
    def setCompVol(self, comp, vol):
        """Set the volume of a compartment.
        
        Note: this function might not work in each solver, for instance when 
        using a mesh-based solver. That is why maybe it should be moved to 
        another set of functionality (e.g. 'func_wm').
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            vol
                The volume (in m^3).
        
        RAISES:
            steps.error.ArgumentError
                When a negative volume was specified.
        """
        if vol < 0.0:
            raise serr.ArgumentError, \
                'Cannot set negative volume (%f).' % vol
        self._siSetCompVol(self._state, self._comp(comp), vol)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getCompCount(self, comp, spec):
        """Count the number of molecules of some species in a compartment.
        
        Note: when used in the context of a mesh-based simulation, the
        total amount is computed as the sum of the amount in all voxels of
        the compartment.
        
        Argument:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
        """
        comp = self._comp(comp)
        spec = self._spec(spec)
        c = self._siGetCompCount(self._state, comp, spec)
        assert c >= 0, \
            'Count of \'%s\' in \'%s\' is negative (%d).' \
            % ( self._specName(spec), self._compName(comp), c )
        return c
    
    
    def setCompCount(self, comp, spec, num):
        """Set the number of molecules of some species in a compartment.
        
        Note: when used in the context of a mesh-based simulation, the 
        molecular count is equally divided over all voxels in the 
        compartment (i.e., it will results in a uniform distribution 
        throughout the compartment).
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
            num
                The number of species. Should be a positive integer,
                but gets rounded when a floating point number was
                specified.
        
        RAISES:
            steps.error.ArgumentError
                When a negative number was specified.
        """
        if num < 0:
            raise serr.ArgumentError, \
                'Specified amount is negative (%d).' % num
        self._siSetCompCount(self._state, \
            self._comp(comp), self._spec(spec), num)


    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getCompMass(self, comp, spec):
        """Return the mass of some species in a compartment (in mole).
        
        Note: when used in the context of a mesh-based simulation, the
        total mass is computed as the sum of the mass in all voxels of
        the compartment.
        
        Argument:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
        """
        comp = self._comp(comp)
        spec = self._spec(spec)
        m = self._siGetCompMass(self._state, comp, spec)
        assert m >= 0.0, \
            'Mass of \'%s\' in \'%s\' is negative (%f).' \
            % ( self._specName(spec), self._compName(comp), m )
        return m
        
    
    def setCompMass(self, comp, spec, mass):
        """Set the mass of some species in a compartment (in mole).
        
        Note: when used in the context of a mesh-based simulation, the 
        total mass is equally divided over all voxels in the compartment
        (i.e., it will results in a uniform distribution throughout the 
        compartment).
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
            mass
                The mass, specified in moles.
        
        RAISES:
            steps.error.ArgumentError
                When a negative mass was specified.
        """
        if mass < 0.0:
            raise serr.ArgumentError, \
                'Specified mass is negative (%f).' % mass
        self._siSetCompMass(self._state, \
            self._comp(comp), self._spec(spec), mass)
    

    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    

    def getCompConc(self, comp, spec):
        """Return the concentration of some species in a compartment 
        (in Molar units).
        
        Note: when used in the context of a mesh-based simulation,
        the overall concentration in a compartment is computed by
        by taking the volume-weighted sum of the concentration in 
        all voxels of the compartment.
        
        Argument:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
        """
        comp = self._comp(comp)
        spec = self._spec(spec)
        c = self._siGetCompConc(self._state, comp, spec)
        assert c >= 0.0, \
            'Concentration of \'%s\' in \'%s\' is negative (%f).' \
            % ( self._specName(spec), self._compName(comp), c )
        return c
        
    
    def setCompConc(self, comp, spec, conc):
        """Set the concentration of some species in a compartment 
        (in Molar units).
        
        Note: when used in the context of a mesh-based simulation, 
        this function changes the concentration to the same value
        in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
            mass
                The concentration, in molar units.
        
        RAISES:
            steps.error.ArgumentError
                When a negative concentration was specified.
        """
        if conc < 0.0:
            raise serr.ArgumentError, \
                'Specified concentration is negative (%f)' % conc
        self._siSetCompConc(self._state, \
            self._comp(comp), self._spec(spec), conc)
    

    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    

    def getCompClamped(self, comp, spec):
        """Return whether the concentration of a species in a compartment
        remains constant over time (unless changed explicitly).
        
        Note: when used in the context of a mesh-based simulation, this 
        function will return True only when the species has been clamped 
        in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
        """
        return self._siGetCompClamped(self._state, \
            self._comp(comp), self._spec(spec))
    
    
    def setCompClamped(self, comp, spec, clamp):
        """Turn clamping for a species in a compartment on or off.
        
        Note: when used in the context of a mesh-based simulation, this 
        function will turn on/off clamping in all voxels of the 
        compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            spec
                The species, identified by name or global index.
            clamp
                A boolean value (True if clamped; False otherwise).
        """
        self._siSetCompClamped(self._state, \
            self._comp(comp), self._spec(spec), clamp)


    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getCompReacK(self, comp, reac):
        """Return the macroscopic reaction constant of a reaction in a 
        compartment.
        
        Note: when used in the context of a mesh-based simulation, the 
        value is computed as the volume-weighted sum of the reaction 
        constants in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        comp = self._comp(comp)
        reac = self._reac(reac)
        k = self._siGetCompReacK(self._state, comp, reac)
        assert k >= 0.0, \
            'Macroscopic constant of \'%s\' in \'%s\' is negative (%d).' \
            % ( self._reacName(reac), self._compName(comp), k )
        return k


    def setCompReacK(self, comp, reac, k):
        """Set the macroscopic reaction constant of a reaction in a 
        compartment (its units vary on the order of the reaction).
        
        Note: when used in the context of a mesh-based simulation, this
        function changes the reaction constant equally in all voxels of the 
        compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
            k
                The macroscopic reaction constant.
                
        RAISES:
            steps.error.ArgumentError
                When a negative constant was specified.
        """
        if k < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic reaction constant is negative (%f)' % k
        self._siSetCompReacK(self._state, \
            self._comp(comp), self._reac(reac), k)

    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getCompReacActive(self, comp, reac):
        """Return whether a reaction in some compartment has been
        activated or not.
        
        Depending on how sophisticated the solver implementation is, 
        inactivating a reaction channel might be more efficient than 
        setting its reaction constant to zero.
        
        Note: when used in the context of a mesh-based solver, this 
        function returns False only when the reaction has been inactivated 
        in all voxels. It returns True otherwise.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        return self._siGetCompReacActive(self._state, \
            self._comp(comp), self._reac(reac))
    
    
    def setCompReacActive(self, comp, reac, act):
        """Activate/inactivate a reaction channel in some compartment.
        
        Depending on how sophisticated the solver implementation is, 
        inactivating a reaction channel might be more efficient than 
        setting its reaction constant to zero.
        
        Note: when used in the context of a mesh-based solver, 
        activation/inactivation of some reaction turns it on/off in 
        all voxels at the same time.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
            act
                A boolean value (True = activated; False = inactivated).
        """
        self._siSetCompReacActive(self._state, \
            self._comp(comp), self._reac(reac), act)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getCompDiffD(self, comp, diff):
        """
        """
        comp = self._comp(comp)
        diff = self._diff(diff)
        d = self._siGetCompDiffD(self._state, comp, diff)
        assert d >= 0.0, \
            'Macroscopic constant of \'%s\' in \'%s\' is negative (%d).' \
            % ( self._diffName(diff), self._compName(comp), d )
        return d
    
    
    def setCompDiffD(self, comp, diff, d):
        """
        """
        if d < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic diffusion constant is negative (%f)' % d
        self._siSetCompDiffD(self._state, \
            self._comp(comp), self._diff(diff), d)


    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getCompDiffActive(self, comp, diff):
        """
        """
        return self._siGetCompDiffActive(self._state, \
            self._comp(comp), self._diff(diff))
    
    
    def setCompDiffActive(self, comp, diff, act):
        """
        """
        self._siSetCompDiffActive(self._state, \
            self._comp(comp), self._diff(diff), act)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getPatchArea(self, patch):
        """
        """
        patch = self._patch(patch)
        area = self._siGetPatchArea(self._state, patch)
        assert area >= 0.0, 'Area of \'%s\' is negative (%f).' \
            % ( self._patchName(patch), area)
        return area
    
    
    def setPatchArea(self, patch, area):
        """
        """
        if area < 0.0:
            raise serr.ArgumentError, \
                'Cannot set negative area (%f).' % area
        self._siSetPatchArea(self._state, self._patch(patch), area)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchCount(self, patch, spec):
        """
        """
        patch = self._patch(patch)
        spec = self._spec(spec)
        c = self._siGetPatchCount(self._state, patch, spec)
        assert c >= 0, \
            'Count of \'%s\' in \'%s\' is negative (%d).' \
            % ( self._specName(spec), self._patchName(patch), c )
        return c
    
    
    def setPatchCount(self, patch, spec, num):
        """
        """
        if num < 0:
            raise serr.ArgumentError, \
                'Specified amount is negative (%d).' % num
        self._siSetPatchCount(self._state, \
            self._patch(patch), self._spec(spec), num)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchMass(self, patch, spec):
        """
        """
        patch = self._patch(patch)
        spec = self._spec(spec)
        m = self._siGetPatchMass(self._state, patch, spec)
        assert m >= 0.0, \
            'Mass of \'%s\' in \'%s\' is negative (%f).' \
            % ( self._specName(spec), self._patchName(patch), m )
        return m
    
    
    def setPatchMass(self, patch, spec, mass):
        """
        """
        if mass < 0.0:
            raise serr.ArgumentError, \
                'Specified mass is negative (%f).' % mass
        self._siSetPatchMass(self._state, \
            self._patch(patch), self._spec(spec), mass)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchClamped(self, patch, spec):
        """
        """
        return self._siGetPatchClamped(self._state, \
            self._patch(patch), self._spec(spec))

        
    def setPatchClamped(self, patch, spec, buf):
        """
        """
        self._siSetPatchClamped(self._state, \
            self._patch(patch), self._spec(spec), buf)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchSReacK(self, patch, sreac):
        """
        """
        patch = self._patch(patch)
        sreac = self._sreac(sreac)
        k = self._siGetPatchSReacK(self._state, patch, sreac)
        assert k >= 0.0, \
            'Macroscopic constant of \'%s\' in \'%s\' is negative (%d).' \
            % ( self._sreacName(sreac), self._patchName(patch), k )
        return k
    
    
    def setPatchSReacK(self, patch, sreac, k):
        """
        """
        if k < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic reaction constant is negative (%f)' % k
        self._siSetPatchSReacK(self._state, \
            self._patch(patch), self._sreac(sreac), k)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchSReacActive(self, patch, sreac):
        """
        """
        return self._siGetPatchSReacActive(self._state, \
            self._patch(patch), self._sreac(sreac))
    
    
    def setPatchSReacActive(self, patch, sreac, act):
        """
        """
        self._siSetPatchReacActive(self._state, \
            self._patch(patch), self._sreac(sreac), act)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


class FuncSSA(FuncCore):


    """Implements simulation functions that are available when using 
    a Gillespie-style solver. 
    
    These solvers track discrete events, meaning that one time step 
    of the simulation corresponds to e.g. one single reaction taking 
    place somewhere. 
    
    With the functions defined in this class, it is possible to advance
    a simulation one event at a time. One can also get access to the 
    propensity values and the extents of each reaction channel.
    """


    def __init__(self):
        # Resolve SSA-specific functionality in the solver module interface.
        self._siStep = self._rsf('siStep')
        self._siGetNSteps = self._rsf('siGetNSteps')
        self._siGetA0 = self._rsf('siGetA0')
        self._siGetCompReacC = self._rsf('siGetCompReacC')
        self._siGetCompReacH = self._rsf('siGetCompReacH')
        self._siGetCompReacA = self._rsf('siGetCompReacA')
        self._siGetCompReacExtent = self._rsf('siGetCompReacExtent')
        self._siResetCompReacExtent = self._rsf('siResetCompReacExtent')
        self._siGetPatchSReacC = self._rsf('siGetPatchSReacC')
        self._siGetPatchSReacH = self._rsf('siGetPatchSReacH')
        self._siGetPatchSReacA = self._rsf('siGetPatchSReacA')
        self._siGetPatchSReacExtent = self._rsf('siGetPatchSReacExtent')
        self._siResetPatchSReacExtent = self._rsf('siResetPatchSReacExtent')


    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def step(self):
        """Advance the simulation by one time step (one discrete event).
        
        In many cases it's not a good idea to do this, because advancing 
        a simulation step by step can substantially increase the relative 
        amount of overhead caused by coming back to the Python script.
        
        RETURNS:
            The current time of the simulation.
        """
        return self._siStep(self._state)


    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getNSteps(self):
        """Return the number of steps the simulation has advanced.
        
        The number of steps is reset to zero when reset() is called. 
        
        A machine word is typically used to store the number of steps,
        so this value might wrap around to zero for extremely long
        simulations.
        """
        n = self._siGetNSteps(self._state)
        assert n >= 0, \
            'Number of steps is negative (%d)' % n
        return n

    nsteps = property(getNSteps)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getA0(self):
        """Return the zero propensity of the current simulation state.
        
        The zero propensity is defined as the sum of the propensity
        values of all individual events. It denotes the probability,
        per unit time, that *something* is going to happen.
        """
        a0 = self._siGetA0(self._state)
        assert a0 >= 0.0, \
            'Zero propensity is negative (%f).' % a0
        return a0
        
    a0 = property(getA0)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getCompReacC(self, comp, reac):
        """Return c_mu, the mesoscopic reaction constant of a reaction  
        in a compartment.
        
        The mesoscopic constant differs from the macroscopic in that it
        has been scaled to deal with discrete numbers of molecules.
        
        Note: when called in the context of a mesh-based simulation, the
        mesoscopic reaction constant is computed as the sum of the
        mesoscopic constants in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        comp = self._comp(comp)
        reac = self._reac(reac)
        c = self._siGetCompReacC(self._state, comp, reac)
        assert c >= 0.0, \
            'c_mu is negative (%f).' % c
        return c
    
    
    def getCompReacH(self, comp, reac):
        """Compute h_mu, the distinct number of ways in which a reaction 
        can occur in a compartment, by computing the product of its 
        reactants.
        
        Note: when used in the context of a mesh-based simulation, it 
        returns the sum of the h_mu's over all voxels of the compartment. 
        This can become a very large value.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        comp = self._comp(comp)
        reac = self._reac(reac)
        h = self._siGetCompReacH(self._state, comp, reac)
        assert h >= 0, \
            'h_mu is negative (%d).' % h
        return h
    
    
    def getCompReacA(self, comp, reac):
        """Return the propensity a_mu of a reaction in a compartment.
        
        The propensity value gives the probability per unit of time that 
        this reaction will occur, given the current local state.
        
        Note: when called in the context of a mesh-based simulation,
        a_mu is computed as the sum of the a_mu in all voxels of the
        compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        comp = self._comp(comp)
        reac = self._reac(reac)
        a = self._siGetCompReacA(self._state, comp, reac)
        assert a >= 0, \
            'Propensity is negative (%f).' % a
        return a
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getCompReacExtent(self, comp, reac):
        """Return the extent of a reaction in a compartment.
        
        Note: when used with a mesh-based solver, it returns the sum of
        the reaction extents in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        comp = self._comp(comp)
        reac = self._reac(reac)
        n = self._siGetCompReacExtent(self._state, comp, reac)
        assert n >= 0, \
            'Extent is negative (%d).' % n
        return n
    
    
    def resetCompReacExtent(self, comp, reac):
        """Reset the extent of a reaction in a compartment to zero.
        
        Note: when used with a mesh-based solver, it resets the extents
        of the reaction in all voxels of the compartment.
        
        Arguments:
            comp
                The compartment, identified by name or global index.
            reac
                The reaction, identified by name or global index.
        """
        self._siResetCompReacExtent(self._state, \
            self._comp(comp), self._reac(reac))
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchSReacC(self, patch, sreac):
        """
        """
        patch = self._patch(patch)
        sreac = self._sreac(sreac)
        c = self._siGetPatchSReacC(self._state, patch, sreac)
        assert c >= 0.0, \
            'c_mu is negative (%f).' % c
        return c
    
    
    def getPatchSReacH(self, patch, sreac):
        """
        """
        patch = self._patch(patch)
        sreac = self._sreac(sreac)
        h = self._siGetPatchSReacH(self._state, patch, sreac)
        assert h >= 0.0, \
            'h_mu is negative (%f).' % h
        return h
    
    
    def getPatchCReacA(self, patch, sreac):
        """
        """
        patch = self._patch(patch)
        sreac = self._sreac(sreac)
        a = self._siGetPatchSReacA(self._state, patch, sreac)
        assert a >= 0.0, \
            'a_mu is negative (%f).' % a
        return a
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getPatchSReacExtent(self, patch, sreac):
        """
        """
        patch = self._patch(patch)
        sreac = self._sreac(sreac)
        n = self._siGetPatchSReacExtent(self._state, patch, sreac)
        assert n >= 0, \
            'Extent is negative (%d).' % n
        return n
    
    
    def resetPatchSReacExtent(self, patch, sreac):
        """
        """
        self._siResetPatchSReacExtent(self._state, \
            self._patch(patch), self._sreac(sreac))
    
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

class FuncTetmesh(FuncCore):


    """
    """


    def __init__(self, geom):
        # Resolve SSA-specific functionality in the solver module interface.
        self._siBeginTetmeshDef = self._rsf('siBeginTetmeshDef')
        self._siEndTetmeshDef = self._rsf('siEndTetmeshDef')
        self._siBeginTetDef = self._rsf('siBeginTetDef')
        self._siEndTetDef = self._rsf('siEndTetDef')
        self._siNewTet = self._rsf('siNewTet')
        self._siBeginTriDef = self._rsf('siBeginTriDef')
        self._siEndTriDef = self._rsf('siEndTriDef')
        self._siNewTri = self._rsf('siNewTri')
        self._siBeginConnectDef = self._rsf('siBeginConnectDef')
        self._siEndConnectDef = self._rsf('siEndConnectDef')
        self._siConnectTetTet = self._rsf('siConnectTetTet')
        self._siConnectTetTri = self._rsf('siConnectTetTri')
        self._siConnectTetTriInner = self._rsf('siConnectTriTetInner')
        self._siConnectTetTriOuter = self._rsf('siConnectTriTetOuter')
        self._siGetTetVol = self._rsf('siGetTetVol')
        self._siSetTetVol = self._rsf('siSetTetVol')
        self._siGetTetCount = self._rsf('siGetTetCount')
        self._siSetTetCount = self._rsf('siSetTetCount')
        self._siGetTetMass = self._rsf('siGetTetMass')
        self._siSetTetMass = self._rsf('siSetTetMass')
        self._siGetTetConc = self._rsf('siGetTetConc')
        self._siSetTetConc = self._rsf('siSetTetConc')
        self._siGetTetClamped = self._rsf('siGetTetClamped')
        self._siSetTetClamped = self._rsf('siSetTetClamped')
        self._siGetTetReacK = self._rsf('siGetTetReacK')
        self._siSetTetReacK = self._rsf('siSetTetReacK')
        self._siGetTetReacActive = self._rsf('siGetTetReacActive')
        self._siSetTetReacActive = self._rsf('siSetTetReacActive')
        self._siGetTetDiffD = self._rsf('siGetTetDiffD')
        self._siSetTetDiffD = self._rsf('siSetTetDiffD')
        self._siGetTetDiffActive = self._rsf('siGetTetDiffActive')
        self._siSetTetDiffActive = self._rsf('siSetTetDiffActive')
        self._siGetTriArea = self._rsf('siGetTriArea')
        self._siSetTriArea = self._rsf('siSetTriArea')
        self._siGetTriCount = self._rsf('siGetTriCount')
        self._siSetTriCount = self._rsf('siSetTriCount')
        self._siGetTriClamped = self._rsf('siGetTriClamped')
        self._siSetTriClamped = self._rsf('siSetTriClamped')
        self._siGetTriSReacK = self._rsf('siGetTriSReacK')
        self._siSetTriSReacK = self._rsf('siSetTriSReacK')
        self._siGetTriSReacActive = self._rsf('siGetTriSReacActive')
        self._siSetTriSReacActive = self._rsf('siSetTriSReacActive')
    
        # Set up the mesh.
        self._setupMesh(geom)
    
        
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def _setupMesh(self, geom):
        """THIS IS COMPLETELY RETARDED CODE, JUST TO GET THINGS UP
        AND RUNNING QUICKLY!!!!!!! REQUIRES COMPLETE EXPANSION
        TO DEAL WITH MORE SOPHISTICATED ISSUES.
        
        IT'S POSSIBLY THE MOST RETARDED CODE EVER WRITTEN.
        
        Right now, the code assigns each tetrahedron to the first
        compartment (i.e. the compartment with index 0) and is
        computing a lot of stuff that shouldn't need to be computed
        here!!! (i.e. using internal variables from module 
        steps.geom.tetmesh). The cause for this is that module
        tetmesh is seriously underdeveloped.  
        """
        
        # Declare to the solver module that we're going to start
        # describing the tetrahedral mesh.
        self._siBeginTetmeshDef(self._state)
        
        # First declare the tetrahedrons themselves.
        self._siBeginTetDef(self._state)
        for t in geom.tets:
            self._siNewTet(self._state, self._comp(t.comp.id), \
                t.vol, t.area0, t.area1, t.area2, t.area3, \
                t.tet0dist, t.tet1dist, t.tet2dist, t.tet3dist)
        self._siEndTetDef(self._state)
        
        # Then declare the triangles.
        self._siBeginTriDef(self._state)
        for t in geom.tris:
            self._siNewTri(self._state, self._patch(t.patch.id), t.area)
        self._siEndTriDef(self._state)
        
        # Then declare the connections between the various elements  
        # that comprise the mesh. 
        self._siBeginConnectDef(self._state)
        for t in geom.tets:
            i0 = t.ntet0idx
            i1 = t.ntet1idx
            i2 = t.ntet2idx
            i3 = t.ntet3idx
            if i0 >= 0:
                self._siConnectTetTet(self._state, 0, t.idx, i0)
            if i1 >= 0:
                self._siConnectTetTet(self._state, 1, t.idx, i1)
            if i2 >= 0:
                self._siConnectTetTet(self._state, 2, t.idx, i2)
            if i3 >= 0:
                self._siConnectTetTet(self._state, 3, t.idx, i3)
            i0 = t.ntri0idx
            i1 = t.ntri1idx
            i2 = t.ntri2idx
            i3 = t.ntri3idx
            if i0 >= 0:
                self._siConnectTetTri(self._state, 0, t.idx, i0)
            if i1 >= 0:
                self._siConnectTetTri(self._state, 1, t.idx, i1)
            if i2 >= 0:
                self._siConnectTetTri(self._state, 2, t.idx, i2)
            if i3 >= 0:
                self._siConnectTetTri(self._state, 3, t.idx, i3)
                
        for t in geom.tris:
            ii = t.itetidx
            io = t.otetidx
            if ii >= 0:
                self._siConnectTriTetInner(self._state, t.idx, ii)
            if io >= 0:
                self._siConnectTriTetOuter(self._state, t.idx, io)
        self._siEndConnectDef(self._state)
        
        # We're finished -- let the solver module hook it all up.
        self._siEndTetmeshDef(self._state)
    

    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetVol(self, tet):
        """
        """
        vol = self._siGetTetVol(self._state, tet)
        assert vol >= 0.0, 'Volume of tetrahedron #%d is negative' % tet
        return vol
    
    
    def setTetVol(self, tet, vol):
        """
        """
        if vol < 0.0:
            raise serr.ArgumentError, \
                'Specified volume (%d) is negative' % vol
        self._siSetTetVol(self._state, tet, vol)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetCount(self, tet, spec):
        """Count the number of molecules of some species in a tetrahedral
        volume element (voxel).
        
        PARAMETERS:
            tet
                The tetrahedron specified by its index.
            spec
                The species, identified by name or global index.
        """
        spec = self._spec(spec)
        c = self._siGetTetCount(self._state, tet, spec)
        assert c >= 0, \
            'Count of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._specName(spec), tet, c )
        return c
    
    
    def setTetCount(self, tet, spec, num):
        """Set the number of molecules of some species in a tetrahedral
        volume element (voxel).
        
        PARAMETERS:
            tet
                The tetrahedron specified by its index.
            spec
                The species, identified by name or global index.
            num
                The number of species. Should be a positive integer,
                but gets rounded when a floating point number was
                specified.
        
        RAISES:
            steps.error.ArgumentError
                When a negative number was specified.
        """
        if num < 0:
            raise serr.ArgumentError, \
                'Specified amount is negative (%d).' % num
        self._siSetTetCount(self._state, tet, self._spec(spec), num)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetMass(self, tet):
        """
        """
        spec = self._spec(spec)
        m = self._siGetTetMass(self._state, tet, spec)
        assert m >= 0, \
            'Mass of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._specName(spec), tet, m )
        return m
    
    
    def setTetMass(self, tet, mass):
        """
        """
        if mass < 0.0:
            raise serr.ArgumentError, \
                'Specified mass is negative (%d).' % mass
        self._siSetTetMass(self._state, tet, self._spec(spec), mass)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetConc(self, tet):
        """
        """
        spec = self._spec(spec)
        c = self._siGetTetConc(self._state, tet, spec)
        assert c >= 0, \
            'Concentration of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._specName(spec), tet, c )
        return c
    
    
    def setTetConc(self, tet, conc):
        """
        """
        if conc < 0.0:
            raise serr.ArgumentError, \
                'Specified concentration is negative (%d).' % conc
        self._siSetTetConc(self._state, tet, self._spec(spec), conc)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #


    def getTetClamped(self, tet, spec):
        """
        """
        spec = self._spec(spec)
        c = self._siGetTetClamped(self._state, tet, spec)
        assert c >= 0, \
            'Concentration of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._specName(spec), tet, c )
        return c
    
    
    def setTetClamped(self, tet, spec, buf):
        """
        """
        self._siSetTetClamped(self._state, tet, self._spec(spec), buf)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetReacK(self, tet, reac):
        """
        """
        reac = self._reac(reac)
        k = self._siGetTetReacK(self._state, tet, reac)
        assert k >= 0.0, \
            'Macroscopic constant of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._reacName(reac), tet, k )
        return k
    
    
    def setTetReacK(self, tet, reac, k):
        """
        """
        if k < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic reaction constant is negative (%f)' % k
        self._siSetTetReacK(self._state, tet, self._reac(reac), k)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetReacActive(self, tet, reac):
        """
        """
        return self._siGetTetReacActive(self._state, tet, self._reac(reac))
    
    
    def setTetReacActive(self, tet, reac, act):
        """
        """
        self._siSetTetReacActive(self._state, tet, self._reac(reac), act)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetDiffD(self, tet, diff):
        """
        """
        diff = self._diff(diff)
        d = self._siGetTetDiffD(self._state, tet, diff)
        assert d >= 0.0, \
            'Macroscopic constant of \'%s\' in tetrahedron #%d is negative (%d).' \
            % ( self._diffName(diff), tet, d )
        return d
    
    
    def setTetDiffD(self, tet, diff, d):
        """
        """
        if d < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic diffusion constant is negative (%f)' % d
        self._siSetTetDiffD(self._state, tet, self._diff(diff), d)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTetDiffActive(self, tet, diff):
        """
        """
        return self._siGetTetDiffActive(self._state, tet, self._diff(diff))
    
    
    def setTetDiffActive(self, tet, diff, act):
        """
        """
        self._siSetTetDiffActive(self._state, tet, self._diff(diff), act)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTriArea(self, tri):
        """
        """
        area = self._siGetTriArea(self._state, tri)
        assert area >= 0.0, 'Area of triangle #%d is negative (%f).' \
            % ( tri, area)
        return area
    
    
    def setTriArea(self, tri, area):
        """
        """
        if area < 0.0:
            raise serr.ArgumentError, \
                'Cannot set negative area (%f).' % area
        self._siSetTriArea(self._state, tri, area)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTriCount(self, tri, spec):
        """
        """
        spec = self._spec(spec)
        c = self._siGetTriCount(self._state, tri, spec)
        assert c >= 0, \
            'Count of \'%s\' in triangle #%d is negative (%d).' \
            % ( self._specName(spec), tri, c )
        return c
    
    
    def setTriCount(self, tri, spec, num):
        """
        """
        if num < 0:
            raise serr.ArgumentError, \
                'Specified amount is negative (%d).' % num
        self._siSetTriCount(self._state, tri, self._spec(spec), num)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTriClamped(self, tri, spec):
        """
        """
        return self._siGetTriClamped(self._state, tri, self._spec(spec))
    
    
    def setTriClamped(self, tri, spec, buf):
        """
        """
        self._siSetTriClamped(self._state, tri, self._spec(spec), buf)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTriSReacK(self, tri, sreac):
        """
        """
        sreac = self._sreac(sreac)
        k = self._siGetTriSReacK(self._state, tri, sreac)
        assert k >= 0.0, \
            'Macroscopic constant of \'%s\' in triangle #%d is negative (%d).' \
            % ( self._sreacName(sreac), tri, k )
        return k
    
    
    def setTriSReacK(self, tri, sreac, k):
        """
        """
        if k < 0.0:
            raise serr.ArgumentError, \
                'Macroscopic reaction constant is negative (%f)' % k
        self._siSetTriSReacK(self._state, tri, self._sreac(sreac), k)
    
    
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
    
    
    def getTriSReacActive(self, tri, sreac):
        """
        """
        return self._siGetTriSReacActive(self._state, tri, self._sreac(sreac))
    
    
    def setTriSReacActive(self, tri, sreac, act):
        """
        """
        self._siSetTriReacActive(self._state, tri, self._sreac(sreac), act)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    
# END
