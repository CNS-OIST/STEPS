# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _model_swig
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _model_swig.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _model_swig.PySwigIterator_value(*args)
    def incr(*args): return _model_swig.PySwigIterator_incr(*args)
    def decr(*args): return _model_swig.PySwigIterator_decr(*args)
    def distance(*args): return _model_swig.PySwigIterator_distance(*args)
    def equal(*args): return _model_swig.PySwigIterator_equal(*args)
    def copy(*args): return _model_swig.PySwigIterator_copy(*args)
    def next(*args): return _model_swig.PySwigIterator_next(*args)
    def previous(*args): return _model_swig.PySwigIterator_previous(*args)
    def advance(*args): return _model_swig.PySwigIterator_advance(*args)
    def __eq__(*args): return _model_swig.PySwigIterator___eq__(*args)
    def __ne__(*args): return _model_swig.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _model_swig.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _model_swig.PySwigIterator___isub__(*args)
    def __add__(*args): return _model_swig.PySwigIterator___add__(*args)
    def __sub__(*args): return _model_swig.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _model_swig.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Err(_object):
    """Proxy of C++ Err class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Err, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Err, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> Err
        __init__(self) -> Err
        """
        this = _model_swig.new_Err(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMsg(*args):
        """getMsg(self) -> char"""
        return _model_swig.Err_getMsg(*args)

    __swig_destroy__ = _model_swig.delete_Err
    __del__ = lambda self : None;
Err_swigregister = _model_swig.Err_swigregister
Err_swigregister(Err)

class ArgErr(Err):
    """Proxy of C++ ArgErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArgErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> ArgErr
        __init__(self) -> ArgErr
        """
        this = _model_swig.new_ArgErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_ArgErr
    __del__ = lambda self : None;
ArgErr_swigregister = _model_swig.ArgErr_swigregister
ArgErr_swigregister(ArgErr)

class NotImplErr(Err):
    """Proxy of C++ NotImplErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> NotImplErr
        __init__(self) -> NotImplErr
        """
        this = _model_swig.new_NotImplErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_NotImplErr
    __del__ = lambda self : None;
NotImplErr_swigregister = _model_swig.NotImplErr_swigregister
NotImplErr_swigregister(NotImplErr)

class vector_str(_object):
    """Proxy of C++ vector_str class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_str, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _model_swig.vector_str_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _model_swig.vector_str___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _model_swig.vector_str___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _model_swig.vector_str_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_str"""
        return _model_swig.vector_str___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_str v)"""
        return _model_swig.vector_str___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _model_swig.vector_str___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _model_swig.vector_str___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _model_swig.vector_str___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _model_swig.vector_str___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _model_swig.vector_str_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _model_swig.vector_str_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _model_swig.vector_str_size(*args)

    def clear(*args):
        """clear(self)"""
        return _model_swig.vector_str_clear(*args)

    def swap(*args):
        """swap(self, vector_str v)"""
        return _model_swig.vector_str_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _model_swig.vector_str_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _model_swig.vector_str_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _model_swig.vector_str_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _model_swig.vector_str_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _model_swig.vector_str_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _model_swig.vector_str_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _model_swig.vector_str_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_str
        __init__(self, vector_str ?) -> vector_str
        __init__(self, size_type size) -> vector_str
        __init__(self, size_type size, value_type value) -> vector_str
        """
        this = _model_swig.new_vector_str(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _model_swig.vector_str_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _model_swig.vector_str_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _model_swig.vector_str_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _model_swig.vector_str_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _model_swig.vector_str_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _model_swig.vector_str_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _model_swig.vector_str_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _model_swig.vector_str_capacity(*args)

    __swig_destroy__ = _model_swig.delete_vector_str
    __del__ = lambda self : None;
vector_str_swigregister = _model_swig.vector_str_swigregister
vector_str_swigregister(vector_str)

class vector_spc(_object):
    """Proxy of C++ vector_spc class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_spc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_spc, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _model_swig.vector_spc_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _model_swig.vector_spc___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _model_swig.vector_spc___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _model_swig.vector_spc_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_spc"""
        return _model_swig.vector_spc___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_spc v)"""
        return _model_swig.vector_spc___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _model_swig.vector_spc___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _model_swig.vector_spc___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _model_swig.vector_spc___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _model_swig.vector_spc___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _model_swig.vector_spc_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _model_swig.vector_spc_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _model_swig.vector_spc_size(*args)

    def clear(*args):
        """clear(self)"""
        return _model_swig.vector_spc_clear(*args)

    def swap(*args):
        """swap(self, vector_spc v)"""
        return _model_swig.vector_spc_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _model_swig.vector_spc_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _model_swig.vector_spc_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _model_swig.vector_spc_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _model_swig.vector_spc_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _model_swig.vector_spc_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _model_swig.vector_spc_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _model_swig.vector_spc_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_spc
        __init__(self, vector_spc ?) -> vector_spc
        __init__(self, size_type size) -> vector_spc
        __init__(self, size_type size, value_type value) -> vector_spc
        """
        this = _model_swig.new_vector_spc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _model_swig.vector_spc_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _model_swig.vector_spc_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _model_swig.vector_spc_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _model_swig.vector_spc_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _model_swig.vector_spc_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _model_swig.vector_spc_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _model_swig.vector_spc_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _model_swig.vector_spc_capacity(*args)

    __swig_destroy__ = _model_swig.delete_vector_spc
    __del__ = lambda self : None;
vector_spc_swigregister = _model_swig.vector_spc_swigregister
vector_spc_swigregister(vector_spc)

class vector_rec(_object):
    """Proxy of C++ vector_rec class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_rec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_rec, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _model_swig.vector_rec_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _model_swig.vector_rec___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _model_swig.vector_rec___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _model_swig.vector_rec_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_rec"""
        return _model_swig.vector_rec___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_rec v)"""
        return _model_swig.vector_rec___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _model_swig.vector_rec___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _model_swig.vector_rec___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _model_swig.vector_rec___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _model_swig.vector_rec___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _model_swig.vector_rec_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _model_swig.vector_rec_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _model_swig.vector_rec_size(*args)

    def clear(*args):
        """clear(self)"""
        return _model_swig.vector_rec_clear(*args)

    def swap(*args):
        """swap(self, vector_rec v)"""
        return _model_swig.vector_rec_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _model_swig.vector_rec_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _model_swig.vector_rec_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _model_swig.vector_rec_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _model_swig.vector_rec_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _model_swig.vector_rec_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _model_swig.vector_rec_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _model_swig.vector_rec_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_rec
        __init__(self, vector_rec ?) -> vector_rec
        __init__(self, size_type size) -> vector_rec
        __init__(self, size_type size, value_type value) -> vector_rec
        """
        this = _model_swig.new_vector_rec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _model_swig.vector_rec_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _model_swig.vector_rec_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _model_swig.vector_rec_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _model_swig.vector_rec_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _model_swig.vector_rec_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _model_swig.vector_rec_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _model_swig.vector_rec_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _model_swig.vector_rec_capacity(*args)

    __swig_destroy__ = _model_swig.delete_vector_rec
    __del__ = lambda self : None;
vector_rec_swigregister = _model_swig.vector_rec_swigregister
vector_rec_swigregister(vector_rec)

class vector_src(_object):
    """Proxy of C++ vector_src class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_src, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_src, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _model_swig.vector_src_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _model_swig.vector_src___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _model_swig.vector_src___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _model_swig.vector_src_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_src"""
        return _model_swig.vector_src___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_src v)"""
        return _model_swig.vector_src___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _model_swig.vector_src___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _model_swig.vector_src___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _model_swig.vector_src___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _model_swig.vector_src___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _model_swig.vector_src_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _model_swig.vector_src_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _model_swig.vector_src_size(*args)

    def clear(*args):
        """clear(self)"""
        return _model_swig.vector_src_clear(*args)

    def swap(*args):
        """swap(self, vector_src v)"""
        return _model_swig.vector_src_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _model_swig.vector_src_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _model_swig.vector_src_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _model_swig.vector_src_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _model_swig.vector_src_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _model_swig.vector_src_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _model_swig.vector_src_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _model_swig.vector_src_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_src
        __init__(self, vector_src ?) -> vector_src
        __init__(self, size_type size) -> vector_src
        __init__(self, size_type size, value_type value) -> vector_src
        """
        this = _model_swig.new_vector_src(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _model_swig.vector_src_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _model_swig.vector_src_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _model_swig.vector_src_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _model_swig.vector_src_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _model_swig.vector_src_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _model_swig.vector_src_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _model_swig.vector_src_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _model_swig.vector_src_capacity(*args)

    __swig_destroy__ = _model_swig.delete_vector_src
    __del__ = lambda self : None;
vector_src_swigregister = _model_swig.vector_src_swigregister
vector_src_swigregister(vector_src)

class vector_dif(_object):
    """Proxy of C++ vector_dif class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_dif, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_dif, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _model_swig.vector_dif_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _model_swig.vector_dif___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _model_swig.vector_dif___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _model_swig.vector_dif_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_dif"""
        return _model_swig.vector_dif___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_dif v)"""
        return _model_swig.vector_dif___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _model_swig.vector_dif___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _model_swig.vector_dif___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _model_swig.vector_dif___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _model_swig.vector_dif___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _model_swig.vector_dif_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _model_swig.vector_dif_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _model_swig.vector_dif_size(*args)

    def clear(*args):
        """clear(self)"""
        return _model_swig.vector_dif_clear(*args)

    def swap(*args):
        """swap(self, vector_dif v)"""
        return _model_swig.vector_dif_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _model_swig.vector_dif_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _model_swig.vector_dif_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _model_swig.vector_dif_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _model_swig.vector_dif_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _model_swig.vector_dif_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _model_swig.vector_dif_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _model_swig.vector_dif_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_dif
        __init__(self, vector_dif ?) -> vector_dif
        __init__(self, size_type size) -> vector_dif
        __init__(self, size_type size, value_type value) -> vector_dif
        """
        this = _model_swig.new_vector_dif(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _model_swig.vector_dif_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _model_swig.vector_dif_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _model_swig.vector_dif_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _model_swig.vector_dif_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _model_swig.vector_dif_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _model_swig.vector_dif_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _model_swig.vector_dif_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _model_swig.vector_dif_capacity(*args)

    __swig_destroy__ = _model_swig.delete_vector_dif
    __del__ = lambda self : None;
vector_dif_swigregister = _model_swig.vector_dif_swigregister
vector_dif_swigregister(vector_dif)


def isValidID(*args):
  """isValidID(string id) -> bool"""
  return _model_swig.isValidID(*args)

def checkID(*args):
  """checkID(string id)"""
  return _model_swig.checkID(*args)
class Model(_object):
    """Proxy of C++ Model class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Model"""
        this = _model_swig.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Model
    __del__ = lambda self : None;
    def getSpec(*args):
        """
        Returns a reference to the steps.model.Spec species object with 
        identifier string spec_id (if defined).

        Syntax::

            getSpec(spec_id)

        Arguments:
            string spec_id
                     
        Return:
            steps.model.Spec

        """
        return _model_swig.Model_getSpec(*args)

    def delSpec(*args):
        """
        Remove the steps.model.Spec species object with identifier 
        string spec_id (if defined) from the model.

        Syntax::

            delSpec(spec_id)

        Arguments:
            string spec_id

        Return:
            None

        """
        return _model_swig.Model_delSpec(*args)

    def getAllSpecs(*args):
        """
        Returns a list of steps.model.Spec object references of all species in the model.

        Syntax::

            getAllSpecs()
            
        Arguments:
            None
                     
        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Model_getAllSpecs(*args)

    def getVolsys(*args):
        """
        Returns a reference to the steps.model.Volsys volume system object with 
        identifier string vsys_id (if defined).

        Syntax::

            getVolsys(vsys_id)

        Arguments:
            string vsys_id

        Return:
            steps.model.Volsys

        """
        return _model_swig.Model_getVolsys(*args)

    def delVolsys(*args):
        """
        Remove the steps.model.Volsys volume system object with identifier string 
        vsys_id (if defined) from the model.

        Syntax::

            delVolsys(vsys_id)

        Arguments:
            string vsys_id

        Return:
            None

        """
        return _model_swig.Model_delVolsys(*args)

    def getSurfsys(*args):
        """
        Returns a reference to the steps.model.Surfsys surface system object with 
        identifier string ssys_id (if defined).

        Syntax::

            getSurfsys(ssys_id)

        Arguments:
            string ssys_id

        Return:
            steps.model.Surfsys

        """
        return _model_swig.Model_getSurfsys(*args)

    def delSurfsys(*args):
        """
        Remove the steps.model.Surfsys surface system object with identifier string 
        ssys_id (if defined) from the model.

        Syntax::

            delSurfsys(ssys_id)

        Arguments:
            string ssys_id

        Return:
            None

        """
        return _model_swig.Model_delSurfsys(*args)

Model_swigregister = _model_swig.Model_swigregister
Model_swigregister(Model)

class Spec(_object):
    """Proxy of C++ Spec class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, string id, Model model) -> Spec"""
        this = _model_swig.new_Spec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Spec
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the species.

        Syntax::

            getID()

        Arguments:
            None

        Return:
            string

        """
        return _model_swig.Spec_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the species.

        Syntax::

            setID(name)

        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.Spec_setID(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()
            
        Arguments:
            None

        Return:
            steps.model.Model
            
        Attribute:
            model

        """
        return _model_swig.Spec_getModel(*args)

Spec_swigregister = _model_swig.Spec_swigregister
Spec_swigregister(Spec)

class Surfsys(_object):
    """Proxy of C++ Surfsys class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surfsys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surfsys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, string id, Model model) -> Surfsys"""
        this = _model_swig.new_Surfsys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Surfsys
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the surface system.

        Syntax::
            
            getID()

        Arguments:
            None

        Return:
            string

        """
        return _model_swig.Surfsys_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the surface system.

        Syntax::

            setID(name)
            
        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.Surfsys_setID(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()

        Arguments:
            None

        Return:
            steps.model.Model

        """
        return _model_swig.Surfsys_getModel(*args)

    def getSReac(*args):
        """
        Returns a reference to the steps.model.SReac surface-reaction object 
        with identifier sreac_id (if defined in the surface system.

        Syntax::

            getSReac(sreac_id)

        Arguments:
            string sreac_id

        Return:
            steps.model.SReac

        """
        return _model_swig.Surfsys_getSReac(*args)

    def delSReac(*args):
        """
        Remove the steps.model.SReac surface-reaction object with identifier 
        sreac_id from the surface system.

        Syntax::

            delSReac(sreac_id)
            
        Arguments:
            string sreac_id

        Return:
            None

        """
        return _model_swig.Surfsys_delSReac(*args)

    def getAllSReacs(*args):
        """
        Returns a list of references to all steps.model.SReac surface-reaction 
        objects defined in the surface system.

        Syntax::

            getAllSReacs()

        Arguments:
            None

        Return:
            list<steps.model.SReac>

        """
        return _model_swig.Surfsys_getAllSReacs(*args)

    def getAllSpecs(*args):
        """
        Returns a list of references to all steps.model.Spec species objects included 
        in the surface system; that is all reactants and products in the surface 
        reactions belonging to this surface system. No duplicate member is included.

        Syntax::

            getAllSpecs()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Surfsys_getAllSpecs(*args)

Surfsys_swigregister = _model_swig.Surfsys_swigregister
Surfsys_swigregister(Surfsys)

class Volsys(_object):
    """Proxy of C++ Volsys class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Volsys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Volsys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, string id, Model model) -> Volsys"""
        this = _model_swig.new_Volsys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Volsys
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the volume system.

        Syntax::

            getID()
            
        Arguments:
            None

        Return:
            string

        """
        return _model_swig.Volsys_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the volume system.

        Syntax::

            setID(name)
            
        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.Volsys_setID(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()
            
        Arguments:
            None

        Return:
            steps.model.Model

        """
        return _model_swig.Volsys_getModel(*args)

    def getReac(*args):
        """
        Returns a reference to the steps.model.Reac reaction-rule object with 
        identifier string reac_id (if defined in the volume system).

        Syntax::

            getReac(reac_id)
            
        Arguments:
            string reac_id

        Return:
            steps.model.Reac

        """
        return _model_swig.Volsys_getReac(*args)

    def delReac(*args):
        """
        Remove the steps.model.Reac reaction-rule object with identifier reac_id 
        (if defined) from the volume system.

        Syntax::

            delReac(reac_id)

        Arguments:
            string reac_id

        Return:
            None

        """
        return _model_swig.Volsys_delReac(*args)

    def getAllReacs(*args):
        """
        Returns a list of references to all steps.model.Spec objects in this volume 
        system; that is all reactants, products or diffusing species in the reaction 
        and diffusion rules belonging to this volume system. No duplicate member is 
        included.

        Syntax::

            getAllReacs()
            
        Arguments:
            None

        Return:
            list<steps.model.Reac>

        """
        return _model_swig.Volsys_getAllReacs(*args)

    def getDiff(*args):
        """
        Returns a reference to the steps.model.Diff diffusion-rule object with 
        identifier diff_id (if defined in the volume system).

        Syntax::

            getDiff(diff_id)
            
        Arguments:
            string diff_id

        Return:
            steps.model.Diff

        """
        return _model_swig.Volsys_getDiff(*args)

    def delDiff(*args):
        """
        Remove the steps.model.Diff diffusion-rule object with identifier diff_id 
        from the volume system.

        Syntax::

            delDiff(diff_id)
            
        Arguments:
            string diff_id

        Return:
            None

        """
        return _model_swig.Volsys_delDiff(*args)

    def getAllDiffs(*args):
        """
        Returns a list of references to all steps.model.Diff diffusion-rule objects 
        defined in the volume system.

        Syntax::

            getAllDiffs()
            
        Arguments:
            None

        Return:
            list<steps.model.Diff>

        """
        return _model_swig.Volsys_getAllDiffs(*args)

    def getAllSpecs(*args):
        """
        Returns a list of references to all steps.model.Spec objects in this volume system; 
        that is all reactants, products or diffusing species in the reaction and diffusion 
        rules belonging to this volume system. No duplicate member is included.

        Syntax::

            getAllSpecs()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Volsys_getAllSpecs(*args)

Volsys_swigregister = _model_swig.Volsys_swigregister
Volsys_swigregister(Volsys)

class Diff(_object):
    """Proxy of C++ Diff class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Diff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Diff, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, string id, Volsys volsys, Spec lig, double dcst=0.0) -> Diff"""
        this = _model_swig.new_Diff(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Diff
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the diffusion rule.

        Syntax::

            getID()
            
        Arguments:
            None

        Return:
            string

        """
        return _model_swig.Diff_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the diffusion rule.

        Syntax::

            setID(name)
            
        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.Diff_setID(*args)

    def getVolsys(*args):
        """
        Returns a reference to the parent steps.model.Volsys volume system object.

        Syntax::

            getVolsys()
            
        Arguments:
            None

        Return:
            steps.model.Volsys

        """
        return _model_swig.Diff_getVolsys(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()
            
        Arguments:
            None

        Return:
            steps.model.Model

        """
        return _model_swig.Diff_getModel(*args)

    def getLig(*args):
        """
        get a reference to the steps.model.Spec species object to which this 
        diffusion rule is applied.

        Syntax::

            getLig()
            
        Arguments:
            None

        Return:
            steps.model.Spec

        """
        return _model_swig.Diff_getLig(*args)

    def setLig(*args):
        """
        Set a reference to the steps.model.Spec species object to which this 
        diffusion rule is applied.

        Syntax::

            setLig(lig)
            
        Arguments:
            steps.model.Spec lig

        Return:
            None

        """
        return _model_swig.Diff_setLig(*args)

    def getDcst(*args):
        """
        Get the diffusion constant for the diffusion rule, in s.i. units.

        Syntax::

            getDcst()
            
        Arguments:
            None

        Return:
            float

        """
        return _model_swig.Diff_getDcst(*args)

    def setDcst(*args):
        """
        Set the diffusion constant for the diffusion rule, in s.i. units.

        Syntax::

            setDcst(dcst)
            
        Arguments:
            float dcst

        Return:
            None

        """
        return _model_swig.Diff_setDcst(*args)

Diff_swigregister = _model_swig.Diff_swigregister
Diff_swigregister(Diff)

class Reac(_object):
    """Proxy of C++ Reac class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reac, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reac, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(self, string id, Volsys volsys, vector_spc lhs=std::vector<steps::model::Spec * >(), 
            vector_spc rhs=std::vector<steps::model::Spec * >(), 
            double kcst=0.0) -> Reac
        """
        this = _model_swig.new_Reac(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_Reac
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the reaction rule.

        Syntax::

            getID()
            
        Arguments:
            None

        Return:
            string

        """
        return _model_swig.Reac_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the reaction rule.

        Syntax::

            setID(name)
            
        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.Reac_setID(*args)

    def getVolsys(*args):
        """
        Returns a reference to the parent steps.model.Volsys volume system object.

        Syntax::

            getVolsys()
            
        Arguments:
            None

        Return:
            steps.model.Volsys

        """
        return _model_swig.Reac_getVolsys(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()
            
        Arguments:
            None

        Return:
            steps.model.Model

        """
        return _model_swig.Reac_getModel(*args)

    def getLHS(*args):
        """
        Get a list of references to steps.model.Spec species objects on the 
        left hand side of the reaction: the reactants.

        Syntax::

            getLHS()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Reac_getLHS(*args)

    def setLHS(*args):
        """
        Set a list of references to steps.model.Spec species objects on the 
        left hand side of the reaction: the reactants.

        Syntax::

            setLHS(lhs)

        Arguments:
            list<steps.model.Spec> lhs

        Return:
            None

        """
        return _model_swig.Reac_setLHS(*args)

    def getRHS(*args):
        """
        Get a list of references to steps.model.Spec species objects on the 
        right hand side of the reaction: the reactants.

        Syntax::

            getRHS()

        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Reac_getRHS(*args)

    def setRHS(*args):
        """
        Set a list of references to steps.model.Spec species objects on the 
        right hand side of the reaction: the reactants.

        Syntax::

            setRHS(rhs)
            
        Arguments:
            list<steps.model.Spec> rhs

        Return:
            None

        """
        return _model_swig.Reac_setRHS(*args)

    def getOrder(*args):
        """
        Returns the order of this reaction.

        Syntax::

            getOrder()
            
        Arguments:
            None

        Return:
            int

        """
        return _model_swig.Reac_getOrder(*args)

    def getKcst(*args):
        """
        Get the kinetic reaction rate constant, in s.i. units, 
        where the actual units depend on the order of the reaction.

        Syntax::
            
            getKcst()

        Arguments:
            None

        Return:
            float

        """
        return _model_swig.Reac_getKcst(*args)

    def setKcst(*args):
        """
        Set the kinetic reaction rate constant, in s.i. units, 
        where the actual units depend on the order of the reaction.

        Syntax::
            
            setKcst(kcst)

        Arguments:
            float kcst

        Return:
            None

        """
        return _model_swig.Reac_setKcst(*args)

    def getAllSpecs(*args):
        """
        Returns a list of references to all steps.model.Spec species objects in 
        the reaction; that is all reactants and products. No duplicate member 
        is included.

        Syntax::

            getAllSpecs()

        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.Reac_getAllSpecs(*args)

Reac_swigregister = _model_swig.Reac_swigregister
Reac_swigregister(Reac)

class SReac(_object):
    """Proxy of C++ SReac class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SReac, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SReac, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(self, string id, Surfsys surfsys, vector_spc olhs=std::vector<steps::model::Spec * >(), 
            vector_spc ilhs=std::vector<steps::model::Spec * >(), 
            vector_spc slhs=std::vector<steps::model::Spec * >(), 
            vector_spc irhs=std::vector<steps::model::Spec * >(), 
            vector_spc srhs=std::vector<steps::model::Spec * >(), 
            vector_spc orhs=std::vector<steps::model::Spec * >(), 
            double kcst=0.0) -> SReac
        """
        this = _model_swig.new_SReac(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_swig.delete_SReac
    __del__ = lambda self : None;
    def getID(*args):
        """
        Get the identifier string of the surface reaction rule.

        Syntax::

            getID()
            
        Arguments:
            None

        Return:
            string

        """
        return _model_swig.SReac_getID(*args)

    def setID(*args):
        """
        Set the identifier string of the surface reaction rule.

        Syntax::

            setID(name)
            
        Arguments:
            string name

        Return:
            None

        """
        return _model_swig.SReac_setID(*args)

    def getSurfsys(*args):
        """
        Returns a reference to the parent steps.model.Surfsys surface system object.

        Syntax::

            getSurfsys()
            
        Arguments:
            None

        Return:
            steps.model.Surfsys

        """
        return _model_swig.SReac_getSurfsys(*args)

    def getModel(*args):
        """
        Returns a reference to the parent steps.model.Model container object.

        Syntax::

            getModel()
            
        Arguments:
            None

        Return:
            steps.model.Model

        """
        return _model_swig.SReac_getModel(*args)

    def getInner(*args):
        """Obsolete"""
        return _model_swig.SReac_getInner(*args)

    def getOuter(*args):
        """Obsolete"""
        return _model_swig.SReac_getOuter(*args)

    def getOLHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the left hand side outer volume reactants.

        Syntax::

            getOLHS()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getOLHS(*args)

    def setOLHS(*args):
        """
        Set a list of references to steps.model.Spec species objects; 
        the left hand side outer volume reactants.

        Syntax::

            setOLHS(olhs)
            
        Arguments:
            list<steps.model.Spec) olhs

        Return:
            None

        """
        return _model_swig.SReac_setOLHS(*args)

    def getILHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the left hand side inner volume reactants.

        Syntax::
            
            getILHS()

        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getILHS(*args)

    def setILHS(*args):
        """
        Set a list of references to steps.model.Spec species objects; 
        the left hand side inner volume reactants.

        Syntax::

            setILHS(ilhs)

        Arguments:
            list<steps.model.Spec> ilhs

        Return:
            None

        """
        return _model_swig.SReac_setILHS(*args)

    def getSLHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the left hand side surface reactants.

        Syntax::

            getSLHS()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getSLHS(*args)

    def setSLHS(*args):
        """
        Set a list of references to steps.model.Spec species objects; 
        the left hand side surface reactants.

        Syntax::

            setSLHS(slhs)
            
        Arguments:
            list<steps.model.Spec> slhs

        Return:
            None

        """
        return _model_swig.SReac_setSLHS(*args)

    def getIRHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the right hand side inner volume reactants.

        Syntax::

            getIRHS()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getIRHS(*args)

    def setIRHS(*args):
        """
        Set a list of references to steps.model.Spec species objects; 
        the right hand side inner volume reactants.

        Syntax::

            setIRHS(irhs)
            
        Arguments:
            list<steps.model.Spec> irhs

        Return:
            None

        """
        return _model_swig.SReac_setIRHS(*args)

    def getSRHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the right hand side surface reactants.

        Syntax::
            
            getSRHS()

        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getSRHS(*args)

    def setSRHS(*args):
        """
        Set a list of references to steps.model.Spec species objects; 
        the right hand side surface reactants.

        Syntax::

            setSRHS(srhs)
            
        Arguments:
            list<steps.model.Spec> srhs

        Return:
            None

        """
        return _model_swig.SReac_setSRHS(*args)

    def getORHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the right hand side outer volume reactants.

        Syntax::

            getORHS()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getORHS(*args)

    def setORHS(*args):
        """
        Get a list of references to steps.model.Spec species objects; 
        the right hand side outer volume reactants.

        Syntax::

            setORHS(orhs)
            
        Arguments:
            list<steps.model.Spec> orhs

        Return:
            None

        """
        return _model_swig.SReac_setORHS(*args)

    def getOrder(*args):
        """
        Returns the order of this surface reaction.

        Syntax::

            getOrder()
            
        Arguments:
            None

        Return:
            int

        """
        return _model_swig.SReac_getOrder(*args)

    def getKcst(*args):
        """
        Get the kinetic reaction rate constant, in s.i. units, 
        where the actual units depend on the order of the surface reaction.

        Syntax::

            getKcst()
            
        Arguments:
            None

        Return:
            float

        """
        return _model_swig.SReac_getKcst(*args)

    def setKcst(*args):
        """
        Set the kinetic reaction rate constant, in s.i. units, 
        where the actual units depend on the order of the surface reaction.

        Syntax::

            setKcst(kcst)
            
        Arguments:
            float kcst

        Return:
            None

        """
        return _model_swig.SReac_setKcst(*args)

    def getAllSpecs(*args):
        """
        Returns a list of references to all steps.model.Spec species objects in 
        the surface reaction; that is all reactants and products. No duplicate member 
        is included.

        Syntax::

            getAllSpecs()
            
        Arguments:
            None

        Return:
            list<steps.model.Spec>

        """
        return _model_swig.SReac_getAllSpecs(*args)

SReac_swigregister = _model_swig.SReac_swigregister
SReac_swigregister(SReac)



