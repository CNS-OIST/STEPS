# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _solver_swig
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _solver_swig.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _solver_swig.PySwigIterator_value(*args)
    def incr(*args): return _solver_swig.PySwigIterator_incr(*args)
    def decr(*args): return _solver_swig.PySwigIterator_decr(*args)
    def distance(*args): return _solver_swig.PySwigIterator_distance(*args)
    def equal(*args): return _solver_swig.PySwigIterator_equal(*args)
    def copy(*args): return _solver_swig.PySwigIterator_copy(*args)
    def next(*args): return _solver_swig.PySwigIterator_next(*args)
    def previous(*args): return _solver_swig.PySwigIterator_previous(*args)
    def advance(*args): return _solver_swig.PySwigIterator_advance(*args)
    def __eq__(*args): return _solver_swig.PySwigIterator___eq__(*args)
    def __ne__(*args): return _solver_swig.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _solver_swig.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _solver_swig.PySwigIterator___isub__(*args)
    def __add__(*args): return _solver_swig.PySwigIterator___add__(*args)
    def __sub__(*args): return _solver_swig.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _solver_swig.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Err(_object):
    """Proxy of C++ Err class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Err, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Err, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> Err
        __init__(self) -> Err
        """
        this = _solver_swig.new_Err(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMsg(*args):
        """getMsg(self) -> char"""
        return _solver_swig.Err_getMsg(*args)

    __swig_destroy__ = _solver_swig.delete_Err
    __del__ = lambda self : None;
Err_swigregister = _solver_swig.Err_swigregister
Err_swigregister(Err)

class ArgErr(Err):
    """Proxy of C++ ArgErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArgErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> ArgErr
        __init__(self) -> ArgErr
        """
        this = _solver_swig.new_ArgErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _solver_swig.delete_ArgErr
    __del__ = lambda self : None;
ArgErr_swigregister = _solver_swig.ArgErr_swigregister
ArgErr_swigregister(ArgErr)

class NotImplErr(Err):
    """Proxy of C++ NotImplErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> NotImplErr
        __init__(self) -> NotImplErr
        """
        this = _solver_swig.new_NotImplErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _solver_swig.delete_NotImplErr
    __del__ = lambda self : None;
NotImplErr_swigregister = _solver_swig.NotImplErr_swigregister
NotImplErr_swigregister(NotImplErr)

class API(_object):
    """Proxy of C++ API class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, API, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, API, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _solver_swig.delete_API
    __del__ = lambda self : None;
    def getSolverName(*args):
        """
        Returns a string of the solver's name.

        Arguments:
            None

        Return:
            string

        """
        return _solver_swig.API_getSolverName(*args)

    def getSolverDesc(*args):
        """
        Returns a string giving a short description of the solver.

        Arguments:
            None

        Return:
            string

        """
        return _solver_swig.API_getSolverDesc(*args)

    def getSolverAuthors(*args):
        """
        Returns a string of the solver authors names.

        Arguments:
            None

        Return:
            string

        """
        return _solver_swig.API_getSolverAuthors(*args)

    def getSolverEmail(*args):
        """
        Returns a string giving the author's email address.

        Arguments:
            None

        Return:
            string

        """
        return _solver_swig.API_getSolverEmail(*args)

    def reset(*args):
        """
        Reset the simulation to the state the solver was initialised to. 
        Typically, this resets all concentrations of all chemical species in 
        all elements (whether compartments and patches in a well-mixed solver 
        or tetrahedrons and triangles in a mesh-based solver) to zero, 
        resets the simulation time to zero and resets reaction (and diffusion) 
        rates to the default values described in the steps.model objects. 
        All reaction (and diffusion) rules are reset to active and all 
        compartment volumes and patch areas are reset to default values 
        described in steps.geom objects (for well-mixed solvers). 
        Usually, this method should be called before starting each simulation iteration.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_reset(*args)

    def run(*args):
        """
        Advance the simulation until endtime (given in seconds) is reached. 
        The endtime must be larger or equal to the current simulation time.

        Arguments:
            float endtime

        Return:
            None

        """
        return _solver_swig.API_run(*args)

    def advance(*args):
        """
        Advance the simulation for secs seconds. 

        Arguments:
            float adv

        Return:
            None

        """
        return _solver_swig.API_advance(*args)

    def step(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_step(*args)

    def setDT(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setDT(*args)

    def getTime(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTime(*args)

    def setTime(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTime(*args)

    def getDT(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getDT(*args)

    def getA0(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getA0(*args)

    def getNSteps(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getNSteps(*args)

    def setNSteps(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setNSteps(*args)

    def getCompVol(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompVol(*args)

    def setCompVol(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompVol(*args)

    def getCompCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompCount(*args)

    def setCompCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompCount(*args)

    def getCompAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompAmount(*args)

    def setCompAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompAmount(*args)

    def getCompConc(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompConc(*args)

    def setCompConc(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompConc(*args)

    def getCompClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompClamped(*args)

    def setCompClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompClamped(*args)

    def getCompReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacK(*args)

    def setCompReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompReacK(*args)

    def getCompReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacActive(*args)

    def setCompReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompReacActive(*args)

    def getCompDiffD(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompDiffD(*args)

    def setCompDiffD(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompDiffD(*args)

    def getCompDiffActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompDiffActive(*args)

    def setCompDiffActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setCompDiffActive(*args)

    def getCompReacC(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacC(*args)

    def getCompReacH(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacH(*args)

    def getCompReacA(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacA(*args)

    def getCompReacExtent(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getCompReacExtent(*args)

    def resetCompReacExtent(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_resetCompReacExtent(*args)

    def getTetVol(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetVol(*args)

    def getTetCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetCount(*args)

    def setTetCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetCount(*args)

    def getTetAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetAmount(*args)

    def setTetAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetAmount(*args)

    def getTetConc(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetConc(*args)

    def setTetConc(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetConc(*args)

    def getTetClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetClamped(*args)

    def setTetClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetClamped(*args)

    def getTetReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetReacK(*args)

    def setTetReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetReacK(*args)

    def getTetReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetReacActive(*args)

    def setTetReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetReacActive(*args)

    def getTetDiffD(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetDiffD(*args)

    def setTetDiffD(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetDiffD(*args)

    def getTetDiffActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetDiffActive(*args)

    def setTetDiffActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTetDiffActive(*args)

    def getTetReacC(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetReacC(*args)

    def getTetReacH(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetReacH(*args)

    def getTetReacA(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetReacA(*args)

    def getTetDiffA(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTetDiffA(*args)

    def getPatchArea(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchArea(*args)

    def setPatchArea(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchArea(*args)

    def getPatchCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchCount(*args)

    def setPatchCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchCount(*args)

    def getPatchAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchAmount(*args)

    def setPatchAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchAmount(*args)

    def getPatchClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchClamped(*args)

    def setPatchClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchClamped(*args)

    def getPatchSReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacK(*args)

    def setPatchSReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchSReacK(*args)

    def getPatchSReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacActive(*args)

    def setPatchSReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setPatchSReacActive(*args)

    def getPatchSReacC(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacC(*args)

    def getPatchSReacH(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacH(*args)

    def getPatchSReacA(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacA(*args)

    def getPatchSReacExtent(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getPatchSReacExtent(*args)

    def resetPatchSReacExtent(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_resetPatchSReacExtent(*args)

    def getTriArea(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriArea(*args)

    def getTriCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriCount(*args)

    def setTriCount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTriCount(*args)

    def getTriAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriAmount(*args)

    def setTriAmount(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTriAmount(*args)

    def getTriClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriClamped(*args)

    def setTriClamped(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTriClamped(*args)

    def getTriSReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriSReacK(*args)

    def setTriSReacK(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTriSReacK(*args)

    def getTriSReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriSReacActive(*args)

    def setTriSReacActive(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_setTriSReacActive(*args)

    def getTriSReacC(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriSReacC(*args)

    def getTriSReacH(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriSReacH(*args)

    def getTriSReacA(*args):
        """
        Advance the simulation for one 'step'. In stochastic solvers this is one 
        'realization' of the Gillespie SSA (one reaction “event”). 
        In numerical solvers (currently Wmrk4) this is one time-step, with the 
        stepsize defined with the setDT method.

        Arguments:
            None

        Return:
            None

        """
        return _solver_swig.API_getTriSReacA(*args)

API_swigregister = _solver_swig.API_swigregister
API_swigregister(API)

class Wmrk4(API):
    """Proxy of C++ Wmrk4 class"""
    __swig_setmethods__ = {}
    for _s in [API]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wmrk4, name, value)
    __swig_getmethods__ = {}
    for _s in [API]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wmrk4, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _solver_swig.delete_Wmrk4
    __del__ = lambda self : None;
Wmrk4_swigregister = _solver_swig.Wmrk4_swigregister
Wmrk4_swigregister(Wmrk4)

class Wmdirect(API):
    """Proxy of C++ Wmdirect class"""
    __swig_setmethods__ = {}
    for _s in [API]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wmdirect, name, value)
    __swig_getmethods__ = {}
    for _s in [API]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wmdirect, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _solver_swig.delete_Wmdirect
    __del__ = lambda self : None;
Wmdirect_swigregister = _solver_swig.Wmdirect_swigregister
Wmdirect_swigregister(Wmdirect)

class Tetexact(API):
    """Proxy of C++ Tetexact class"""
    __swig_setmethods__ = {}
    for _s in [API]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tetexact, name, value)
    __swig_getmethods__ = {}
    for _s in [API]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tetexact, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _solver_swig.delete_Tetexact
    __del__ = lambda self : None;
Tetexact_swigregister = _solver_swig.Tetexact_swigregister
Tetexact_swigregister(Tetexact)



