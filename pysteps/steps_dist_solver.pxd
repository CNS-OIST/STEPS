# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from libcpp cimport bool
from libcpp.memory cimport shared_ptr
cimport std
cimport steps
cimport steps_solver
cimport steps_model
cimport steps_dist_tetmesh
cimport steps_wm
cimport steps_rng
from steps_common cimport *
from steps_dist cimport *

IF USE_PETSC:
    # ======================================================================================================================
    cdef extern from "<petscksp.h>":
    # ----------------------------------------------------------------------------------------------------------------------

        ctypedef enum KSPNormType:
            KSP_NORM_DEFAULT,
            KSP_NORM_NONE,
            KSP_NORM_PRECONDITIONED,
            KSP_NORM_UNPRECONDITIONED,
            KSP_NORM_NATURAL,

# ======================================================================================================================        
cdef extern from "math/distributions.hpp" namespace "steps::math":
# ----------------------------------------------------------------------------------------------------------------------

    cdef enum DistributionMethod:
        UNIFORM "steps::math::DistributionMethod::DIST_UNIFORM",
        MULTINOMIAL "steps::math::DistributionMethod::DIST_MULTINOMIAL"

# ======================================================================================================================
cdef extern from "mpi/dist/tetopsplit/fwd.hpp" namespace "steps::dist":
# ----------------------------------------------------------------------------------------------------------------------

    cdef cppclass SSAMethod_SSA "steps::dist::SSAMethod::SSA":
        pass

    cdef cppclass SSAMethod_RSSA "steps::dist::SSAMethod::RSSA":
        pass

    cdef cppclass NextEventSearchMethod_Direct "steps::dist::NextEventSearchMethod::Direct":
        pass

    cdef cppclass NextEventSearchMethod_GibsonBruck "steps::dist::NextEventSearchMethod::GibsonBruck":
        pass


# ======================================================================================================================
cdef extern from "mpi/dist/tetopsplit/tetopsplit.hpp" namespace "steps::dist":
# ----------------------------------------------------------------------------------------------------------------------
    ###### Cybinding for TetOpSplit ######
    cdef cppclass TetOpSplitBase:
        std.string getSolverName() except +
        std.string getSolverDesc() except +
        std.string getSolverAuthors() except +
        std.string getSolverEmail() except +
        void reset() except +
        void run(double) except +
        void checkpoint(std.string) except +
        void restore(std.string) except +
        double getTime() except +
        uint getNSteps() except +
        void setTime(double) except +
        void setNSteps(uint) except +

        std.vector[double] getBatchTetCounts(std.vector[GO], std.string) except +
        void setBatchTetCounts(std.vector[GO], std.string, std.vector[double]) except +
        std.vector[double] getBatchTetConcs(std.vector[GO], std.string) except +
        void setBatchTetConcs(std.vector[GO], std.string, std.vector[double]) except +
        std.vector[double] getBatchTriCounts(std.vector[GO], std.string) except +
        void setBatchTriCounts(std.vector[GO], std.string, std.vector[double]) except +

        void getBatchTetCountsNP(GO*, int, std.string, double*, int) except +
        void setBatchTetCountsNP(GO*, int, std.string, double*, int) except +
        void getBatchTetConcsNP(GO*, int, std.string, double*, int) except +
        void setBatchTetConcsNP(GO*, int, std.string, double*, int) except +
        void getBatchTriCountsNP(GO*, int, std.string, double*, int) except +
        void setBatchTriCountsNP(GO*, int, std.string, double*, int) except +

        void getBatchVertVsNP(GO*, int, double*, int) except +
        void getBatchTriVsNP(GO*, int, double*, int) except +
        void getBatchTetVsNP(GO*, int, double*, int) except +

        void getBatchTriOhmicIsNP(GO*, int, std.string, double*, int) except +
        void getBatchTriGHKIsNP(GO*, int, std.string, double*, int) except +

        void setDiffBoundaryDiffusionActive(std.string, std.string, bool) except +
        bool getDiffBoundaryDiffusionActive(std.string, std.string) except +

        void setDiffApplyThreshold(int) except +
        int getDiffApplyThreshold() except +

        unsigned long long getReacExtent(bool) except +
        unsigned long long getDiffExtent(bool) except +

        double getNIteration() except +
        double getUpdPeriod() except +
        double getCompTime() except +
        double getSyncTime() except +
        double getIdleTime() except +
        double getRDTime() except +
        double getDiffusionTime() except +
        double getReactionTime() except +
        double getDataExchangeTime() except +

        void setMembIClamp(std.string, double) except +
        double getVertIClamp(GO) except +
        void setVertIClamp(GO, double) except +
        double getEfieldDT() except +
        void setEfieldDT(double) except +
        void setEfieldTolerances(double, double, KSPNormType) except +
        void setTemp(double) except +
        double getTemp() except +

        # Not sure they are all mandatory
        double getCompVol(std.string) except +
        double getCompCount(std.string, std.string) except +
        void setCompCount(std.string, std.string, double, DistributionMethod) except +
        double getCompAmount(std.string, std.string) except +
        void setCompAmount(std.string, std.string, double) except +
        double getCompConc(std.string, std.string) except +
        void setCompConc(std.string, std.string, double, DistributionMethod) except +
        bool getCompClamped(std.string, std.string) except +
        void setCompClamped(std.string, std.string, bool) except +
        double getCompReacK(std.string, std.string) except +
        void setCompReacK(std.string, std.string, double) except +
        bool getCompReacActive(std.string, std.string) except +
        void setCompReacActive(std.string, std.string, bool) except +
        double getTetCount(uint, std.string) except +
        void setTetCount(uint, std.string, double) except +
        double getTetConc(uint, std.string) except +
        void setTetConc(uint, std.string, double) except +
        double getPatchArea(std.string) except +
        double getPatchCount(std.string, std.string) except +
        void setPatchCount(std.string, std.string, double, DistributionMethod) except +
        double getPatchAmount(std.string, std.string) except +
        void setPatchAmount(std.string, std.string, double) except +
        bool getPatchClamped(std.string, std.string) except +
        void setPatchClamped(std.string, std.string, bool) except +
        double getPatchSReacK(std.string, std.string) except +
        void setPatchSReacK(std.string, std.string, double) except +
        bool getPatchSReacActive(std.string, std.string) except +
        void setPatchSReacActive(std.string, std.string, bool) except +
        double getPatchMaxV(std.string) except +
        double getTriCount(uint, std.string) except +
        void setTriCount(uint, std.string, double) except +
        double getVertV(GO) except +
        double getTriV(GO) except +
        double getTetV(GO) except +
        double getTriOhmicI(GO, std.string) except +
        double getTriGHKI(GO, std.string) except +
        void setMembPotential(std.string, double) except +

    cdef cppclass TetOpSplit[T, U]:
        TetOpSplit(steps_model.Model&, steps_dist_tetmesh.DistMesh&, shared_ptr[steps_rng.RNG], bool) except +
