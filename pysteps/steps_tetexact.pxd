# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from cython.operator cimport dereference as deref
cimport std
cimport steps_solver
cimport steps_model
cimport steps_tetmesh
cimport steps_wm
cimport steps_rng

# ======================================================================================================================
cdef extern from "steps/tetexact/vdeptrans.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for VDepTrans ######
    cdef cppclass TEVDepTrans "steps::tetexact::VDepTrans":
        TEVDepTrans(steps_solver.VDepTransdef*, TETri*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()

# ======================================================================================================================
cdef extern from "steps/tetexact/diff.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Diff ######
    cdef cppclass TEDiff "steps::tetexact::Diff":
        TEDiff(steps_solver.Diffdef*, TETet*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # steps.solver.Diffdef* def_()
        # double dcst(int)
        # void setDcst(double)
        # void setDirectionDcst(int, double)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()
        # void setDiffBndActive(unsigned int, bool)
        # bool getDiffBndActive(unsigned int)

# ======================================================================================================================
cdef extern from "steps/tetexact/kproc.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef TEKProc* KProcP
    # ctypedef std.vector[TEKProc*] KProcPVec
    # ctypedef std.vector[TEKProc*].iterator KProcPVecI
    # ctypedef std.vector[TEKProc*].const_iterator KProcPVecCI

    ###### Cybinding for KProc ######
    cdef cppclass TEKProc "steps::tetexact::KProc":
        TEKProc()
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # bool active()
        # bool inactive()
        # void setActive(bool)
        # unsigned int flags()
        # unsigned int schedIDX()
        # void setSchedIDX(unsigned int)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # void resetCcst()
        # double rate(Tetexact*)
        # double c()
        # double h()
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()
        # unsigned int getExtent()
        # void resetExtent()

# ======================================================================================================================
cdef extern from "steps/tetexact/tet.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Tet* TetP
    # ctypedef std.vector[Tet*] TetPVec
    # ctypedef std.vector[Tet*].iterator TetPVecI
    # ctypedef std.vector[Tet*].const_iterator TetPVecCI

    ###### Cybinding for Tet ######
    cdef cppclass TETet "steps::tetexact::Tet":
        TETet(unsigned int, steps_solver.Compdef*, double, double, double, double, double, double, double, double, double, int, int, int, int)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setNextTet(unsigned int, Tet*)
        # void setNextTri(unsigned int, Tri*)
        # void setNextTri(Tri*)
        # void setupKProcs(Tetexact*)
        # Tri* nextTri(unsigned int)
        # Tet* nextTet(unsigned int)
        # double area(unsigned int)
        # double dist(unsigned int)
        # int getTetDirection(unsigned int)
        # void setDiffBndDirection(unsigned int)
        # bool getDiffBndDirection(unsigned int)
        # Diff* diff(unsigned int)
        # int tet(unsigned int)

# ======================================================================================================================
cdef extern from "steps/tetexact/diffboundary.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef DiffBoundary* DiffBoundaryP
    # ctypedef std.vector[DiffBoundary*] DiffBoundaryPVec
    # ctypedef std.vector[DiffBoundary*].iterator DiffBoundaryPVecI
    # ctypedef std.vector[DiffBoundary*].const_iterator DiffBoundaryPVecCI

    ###### Cybinding for DiffBoundary ######
    cdef cppclass TEDiffBoundary "steps::tetexact::DiffBoundary":
        TEDiffBoundary(steps_solver.DiffBoundarydef*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # steps.solver.DiffBoundarydef* def_()
        # Comp* compA()
        # Comp* compB()
        # void setComps(Comp*, Comp*)
        # void setTetDirection(unsigned int, unsigned int)
        # std.vector[unsigned int] getTets()
        # std.vector[unsigned int] getTetDirection()

# ======================================================================================================================
cdef extern from "steps/tetexact/crstruct.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for CRGroup ######
    cdef cppclass CRGroup:
        CRGroup(int, unsigned int)
        void free_indices()

    ###### Cybinding for CRKProcData ######
    cdef cppclass CRKProcData:
        CRKProcData()

# ======================================================================================================================
cdef extern from "steps/tetexact/sdiff.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for SDiff ######
    cdef cppclass SDiff:
        SDiff(steps_solver.Diffdef*, TETri*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # steps.solver.Diffdef* sdef()
        # double dcst(int)
        # void setDcst(double)
        # void setDirectionDcst(int, double)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()        

# ======================================================================================================================
cdef extern from "steps/tetexact/tetexact.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef unsigned int SchedIDX
    # ctypedef std.set[unsigned int] SchedIDXSet
    # ctypedef std.set[unsigned int].iterator SchedIDXSetI
    # ctypedef std.set[unsigned int].const_iterator SchedIDXSetCI
    # ctypedef std.vector[unsigned int] SchedIDXVec
    # ctypedef std.vector[unsigned int].iterator SchedIDXVecI
    # ctypedef std.vector[unsigned int].const_iterator SchedIDXVecCI

    ###### Cybinding for Tetexact ######
    cdef cppclass Tetexact:
        Tetexact(steps_model.Model*, steps_wm.Geom*, steps_rng.RNG*, int)
        std.string getSolverName()
        std.string getSolverDesc()
        std.string getSolverAuthors()
        std.string getSolverEmail()
        void reset()
        void run(double)
        void advance(double)
        void step()
        void checkpoint(std.string)
        void restore(std.string)
        void setEfieldDT(double)
        double efdt()
        void setTemp(double)
        double getTemp()
        void saveMembOpt(std.string)
        double getTime()
        double getA0()
        unsigned int getNSteps()
        void setTime(double)
        void setNSteps(unsigned int)
        void addKProc(TEKProc*)
        unsigned int countKProcs()
        steps_tetmesh.Tetmesh* mesh()
        # std.vector[Patch*] patches()
        # double a0()
        # unsigned int specG2L_or_throw(Comp*, unsigned int)
        # unsigned int specG2L_or_throw(Patch*, unsigned int)
        # unsigned int reacG2L_or_throw(Comp*, unsigned int)
        # unsigned int sreacG2L_or_throw(Patch*, unsigned int)
        # unsigned int diffG2L_or_throw(Comp*, unsigned int)
        # unsigned int sdiffG2L_or_throw(Patch*, unsigned int)
        # unsigned int vdepsreacG2L_or_throw(Patch*, unsigned int)
        # bool efflag()
        # unsigned int neftets()
        # unsigned int neftris()
        # unsigned int nefverts()
        # std.vector[double] getBatchTetCounts(std.vector[unsigned int], std.string)
        # std.vector[double] getBatchTriCounts(std.vector[unsigned int], std.string)
        # void getBatchTetCountsNP(unsigned int*, int, std.string, double*, int)
        # void getBatchTriCountsNP(unsigned int*, int, std.string, double*, int)
        # std.vector[double] getROITetCounts(std.string, std.string)
        # std.vector[double] getROITriCounts(std.string, std.string)
        # void getROITetCountsNP(std.string, std.string, double*, int)
        # void getROITriCountsNP(std.string, std.string, double*, int)
        # double getROIVol(std.string)
        # double getROIArea(std.string)
        # double getROICount(std.string, std.string)
        # void setROICount(std.string, std.string, double)
        # double getROIAmount(std.string, std.string)
        # double getROIConc(std.string, std.string)
        # void setROIConc(std.string, std.string, double)
        # void setROIClamped(std.string, std.string, bool)
        # void setROIReacK(std.string, std.string, double)
        # void setROISReacK(std.string, std.string, double)
        # void setROIDiffD(std.string, std.string, double)
        # void setROIReacActive(std.string, std.string, bool)
        # void setROISReacActive(std.string, std.string, bool)
        # void setROIDiffActive(std.string, std.string, bool)
        # void setROIVDepSReacActive(std.string, std.string, bool)
        # unsigned int getROIReacExtent(std.string, std.string)
        # void resetROIReacExtent(std.string, std.string)
        # unsigned int getROISReacExtent(std.string, std.string)
        # void resetROISReacExtent(std.string, std.string)
        # unsigned int getROIDiffExtent(std.string, std.string)
        # void resetROIDiffExtent(std.string, std.string)
        

# ======================================================================================================================
cdef extern from "steps/tetexact/comp.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Comp* CompP
    # ctypedef std.vector[Comp*] CompPVec
    # ctypedef std.vector[Comp*].iterator CompPVecI
    # ctypedef std.vector[Comp*].const_iterator CompPVecCI

    ###### Cybinding for Comp ######
    cdef cppclass TEComp "steps::tetexact::Comp":
        TEComp(steps_solver.Compdef*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void addTet(WmVol*)
        # void reset()
        # steps.solver.Compdef* def_()
        # double vol()
        # double* pools()
        # void modCount(unsigned int, double)
        # unsigned int countTets()
        # WmVol* pickTetByVol(double)
        # std.vector[WmVol*].const_iterator bgnTet()
        # std.vector[WmVol*].const_iterator endTet()
        # std.vector[WmVol*] tets()

# ======================================================================================================================
cdef extern from "steps/tetexact/vdepsreac.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for VDepSReac ######
    cdef cppclass TEVDepSReac "steps::tetexact::VDepSReac":
        TEVDepSReac(steps_solver.VDepSReacdef*, TETri*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()

# ======================================================================================================================
cdef extern from "steps/tetexact/reac.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Reac ######
    cdef cppclass TEReac "steps::tetexact::Reac":
        TEReac(steps_solver.Reacdef*, TEWmVol*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # double c()
        # void resetCcst()
        # double kcst()
        # void setKcst(double)
        # double h()
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()

# ======================================================================================================================
cdef extern from "steps/tetexact/sreac.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for SReac ######
    cdef cppclass TESReac "steps::tetexact::SReac":
        TESReac(steps_solver.SReacdef*, TETri*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # double c()
        # void resetCcst()
        # double kcst()
        # void setKcst(double)
        # double h()
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # unsigned int updVecSize()

# ======================================================================================================================
cdef extern from "steps/tetexact/wmvol.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef WmVol* WmVolP
    # ctypedef std.vector[WmVol*] WmVolPVec
    # ctypedef std.vector[WmVol*].iterator WmVolPVecI
    # ctypedef std.vector[WmVol*].const_iterator WmVolPVecCI

    ###### Cybinding for WmVol ######
    cdef cppclass TEWmVol "steps::tetexact::WmVol":
        TEWmVol(unsigned int, steps_solver.Compdef*, double)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setupKProcs(Tetexact*)
        # void setNextTri(Tri*)
        # void reset()
        # steps.solver.Compdef* compdef()
        # unsigned int idx()
        # double vol()
        # unsigned int* pools()
        # void setCount(unsigned int, unsigned int)
        # void incCount(unsigned int, int)
        # double conc(unsigned int)
        # bool clamped(unsigned int)
        # void setClamped(unsigned int, bool)
        # std.vector[Tri*] nexttriBegin()
        # std.vector[Tri*] nexttriEnd()
        # unsigned int countNextTris()
        # std.vector[Tri*] nexttris()
        # std.vector[TEKProc*] kprocBegin()
        # std.vector[TEKProc*] kprocEnd()
        # unsigned int countKProcs()
        # std.vector[TEKProc*] kprocs()
        # Reac* reac(unsigned int)

# ======================================================================================================================
cdef extern from "steps/tetexact/ghkcurr.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for GHKcurr ######
    cdef cppclass TEGHKcurr "steps::tetexact::GHKcurr":
        TEGHKcurr(steps_solver.GHKcurrdef*, TETri*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setupDeps()
        # bool depSpecTet(unsigned int, WmVol*)
        # bool depSpecTri(unsigned int, Tri*)
        # void reset()
        # double rate(Tetexact*)
        # std.vector[TEKProc*] apply(steps.rng.RNG*, double, double)
        # bool efflux()
        # void setEffFlux(bool)
        # unsigned int updVecSize()

# ======================================================================================================================
cdef extern from "steps/tetexact/patch.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Patch* PatchP
    # ctypedef std.vector[Patch*] PatchPVec
    # ctypedef std.vector[Patch*].iterator PatchPVecI
    # ctypedef std.vector[Patch*].const_iterator PatchPVecCI

    ###### Cybinding for Patch ######
    cdef cppclass TEPatch "steps::tetexact::Patch":
        TEPatch(steps_solver.Patchdef*)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void addTri(Tri*)
        # void reset()
        # steps.solver.Patchdef* def_()
        # double area()
        # double* pools()
        # void modCount(unsigned int, double)
        # unsigned int countTris()
        # Tri* pickTriByArea(double)
        # std.vector[Tri*].const_iterator bgnTri()
        # std.vector[Tri*].const_iterator endTri()
        # std.vector[Tri*] tris()

# ======================================================================================================================
cdef extern from "steps/tetexact/tri.hpp" namespace "steps::tetexact":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Tri* TriP
    # ctypedef std.vector[Tri*] TriPVec
    # ctypedef std.vector[Tri*].iterator TriPVecI
    # ctypedef std.vector[Tri*].const_iterator TriPVecCI

    ###### Cybinding for Tri ######
    cdef cppclass TETri "steps::tetexact::Tri":
        TETri(unsigned int, steps_solver.Patchdef*, double, double, double, double, double, double, double, int, int, int, int, int)
        # void checkpoint(std.fstream)
        # void restore(std.fstream)
        # void setInnerTet(WmVol*)
        # void setOuterTet(WmVol*)
        # void setNextTri(unsigned int, Tri*)
        # void setupKProcs(Tetexact*, bool)
        # void reset()
        # steps.solver.Patchdef* patchdef()
        # unsigned int idx()
        # double area()
        # WmVol* iTet()
        # WmVol* oTet()
        # Tri* nextTri(unsigned int)
        # int tri(unsigned int)
        # double length(unsigned int)
        # double dist(unsigned int)
        # int tet(unsigned int)
        # int getTriDirection(unsigned int)
        # void setDiffBndDirection(unsigned int)
        # bool getDiffBndDirection(unsigned int)
        # void incECharge(unsigned int, int)
        # void resetECharge()
        # void resetOCintegrals()
        # double computeI(double, double, double)
        # double getOhmicI(double, double)
        # double getOhmicI(unsigned int, double, double)
        # double getGHKI(double)
        # double getGHKI(unsigned int, double)
        # unsigned int* pools()
        # void setCount(unsigned int, unsigned int)
        # void incCount(unsigned int, int)
        # bool clamped(unsigned int)
        # void setClamped(unsigned int, bool)
        # void setOCchange(unsigned int, unsigned int, double, double)
        # std.vector[TEKProc*] kprocBegin()
        # std.vector[TEKProc*] kprocEnd()
        # std.vector[TEKProc*] kprocs()
        # unsigned int countKProcs()
        # SReac* sreac(unsigned int)
        # SDiff* sdiff(unsigned int)
        # VDepTrans* vdeptrans(unsigned int)
        # VDepSReac* vdepsreac(unsigned int)
        # GHKcurr* ghkcurr(unsigned int)
