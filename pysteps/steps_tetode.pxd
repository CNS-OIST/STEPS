# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from cython.operator cimport dereference as deref
from libcpp cimport bool
cimport std
cimport steps_solver
cimport steps_model
cimport steps_tetmesh
cimport steps_wm
cimport steps_rng

# ======================================================================================================================
cdef extern from "steps/tetode/patch.hpp" namespace "steps::tetode":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Patch* PatchP
    # ctypedef std.vector[Patch*] PatchPVec
    # ctypedef std.vector[Patch*].iterator PatchPVecI
    # ctypedef std.vector[Patch*].const_iterator PatchPVecCI

    ###### Cybinding for Patch ######
    cdef cppclass TOPatch "steps::tetode::Patch":
        TOPatch(steps_solver.Patchdef*)
        void checkpoint(std.fstream)
        void restore(std.fstream)
        void addTri(TOTri*)
        double area()
        unsigned int getTri_GtoL(unsigned int)
        TOTri* getTri(unsigned int)
        steps_solver.Patchdef* def_()
        unsigned int countTris()
        std.vector[TOTri*].const_iterator bgnTri()
        std.vector[TOTri*].const_iterator endTri()

# ======================================================================================================================
cdef extern from "steps/tetode/tetode.hpp" namespace "steps::tetode":
# ----------------------------------------------------------------------------------------------------------------------

    # ###### Cybinding for structC ######
    # cdef cppclass structC:
    #     structC()
    #     pass
    # ###### Cybinding for structB ######
    # cdef cppclass structB:
    #     structB()
    #     pass
    # ###### Cybinding for structA ######
    # cdef cppclass structA:
    #     structA()
    #     pass
    
    ###### Cybinding for TetODE ######
    cdef cppclass TetODE:
        TetODE(steps_model.Model*, steps_wm.Geom*, steps_rng.RNG*, int)
        std.string getSolverName()
        std.string getSolverDesc()
        std.string getSolverAuthors()
        std.string getSolverEmail()
        void checkpoint(std.string)
        void restore(std.string)
        double getTime()
        double getTemp()
        void setTemp(double)
        void reset()
        void run(double)
        void advance(double)
        steps_tetmesh.Tetmesh* mesh()
        void setTolerances(double, double)
        void setMaxNumSteps(unsigned int)
        bool efflag()
        unsigned int neftets()
        unsigned int neftris()
        unsigned int nefverts()

# ======================================================================================================================
cdef extern from "steps/tetode/tet.hpp" namespace "steps::tetode":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Tet* TetP
    # ctypedef std.vector[Tet*] TetPVec
    # ctypedef std.vector[Tet*].iterator TetPVecI
    # ctypedef std.vector[Tet*].const_iterator TetPVecCI

    ###### Cybinding for Tet ######
    cdef cppclass TOTet "steps::tetode::Tet":
        TOTet(unsigned int, steps_solver.Compdef*, double, double, double, double, double, double, double, double, double, int, int, int, int)
        steps_solver.Compdef* compdef()
        void setNextTet(unsigned int, TOTet*)
        void setNextTri(unsigned int, TOTri*)
        void checkpoint(std.fstream)
        void restore(std.fstream)
        double vol()
        unsigned int idx()
        TOTri* nextTri(unsigned int)
        TOTet* nextTet(unsigned int)
        double area(unsigned int)
        double dist(unsigned int)
        int tet(unsigned int)

# ======================================================================================================================
cdef extern from "steps/tetode/comp.hpp" namespace "steps::tetode":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Comp* CompP
    # ctypedef std.vector[Comp*] CompPVec
    # ctypedef std.vector[Comp*].iterator CompPVecI
    # ctypedef std.vector[Comp*].const_iterator CompPVecCI

    ###### Cybinding for Comp ######
    cdef cppclass TOComp "steps::tetode::Comp":
        TOComp(steps_solver.Compdef*)
        void checkpoint(std.fstream)
        void restore(std.fstream)
        void addTet(TOTet*)
        steps_solver.Compdef* def_()
        unsigned int getTet_GtoL(unsigned int)
        TOTet* getTet(unsigned int)
        double vol()
        unsigned int countTets()
        std.vector[TOTet*].const_iterator bgnTet()
        std.vector[TOTet*].const_iterator endTet()

# ======================================================================================================================
cdef extern from "steps/tetode/tri.hpp" namespace "steps::tetode":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Tri* TriP
    # ctypedef std.vector[Tri*] TriPVec
    # ctypedef std.vector[Tri*].iterator TriPVecI
    # ctypedef std.vector[Tri*].const_iterator TriPVecCI

    ###### Cybinding for Tri ######
    cdef cppclass TOTri "steps::tetode::Tri":
        TOTri(unsigned int, steps_solver.Patchdef*, double, double, double, double, double, double, double, int, int, int, int, int)
        void setInnerTet(TOTet*)
        void setOuterTet(TOTet*)
        void setNextTri(unsigned int, TOTri*)
        void checkpoint(std.fstream)
        void restore(std.fstream)
        steps_solver.Patchdef* patchdef()
        unsigned int idx()
        double area()
        TOTet* iTet()
        TOTet* oTet()
        TOTri* nextTri(unsigned int)
        int tri(unsigned int)
        double length(unsigned int)
        double dist(unsigned int)
        int tet(unsigned int)
        double getOhmicI(double, TetODE*)
        double getGHKI(double, double, TetODE*)
