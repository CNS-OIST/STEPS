# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from cython.operator cimport dereference as deref
from libcpp cimport bool
cimport std
cimport steps_wm
cimport steps_rng
cimport steps_model
#cimport steps_tetmesh

# ======================================================================================================================
cdef extern from "steps/solver/patchdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    # ctypedef Patchdef* PatchDefP
    # ctypedef std.vector[Patchdef*] PatchDefPVec
    # ctypedef std.vector[Patchdef*].iterator PatchDefPVecI
    # ctypedef std.vector[Patchdef*].const_iterator PatchDefPVecCI

    ###### Cybinding for Patchdef ######
    cdef cppclass Patchdef:
        Patchdef(Statedef*, unsigned int, steps_wm.Patch*)
#         #void checkpoint(std.fstream)
#         #void restore(std.fstream)
#         double area()
#         unsigned int gidx()
#         std.string name()
#         Compdef* icompdef()
#         Compdef* ocompdef()
#         void setup_references()
#         void setup_indices()
#         void setArea(double)
#         double getArea()
#         void reset()
#         unsigned int countSpecs()
#         unsigned int countSpecs_I()
#         unsigned int countSpecs_O()
#         unsigned int specG2L(unsigned int)
#         unsigned int specL2G(unsigned int)
#         unsigned int specG2L_I(unsigned int)
#         unsigned int specG2L_O(unsigned int)
#         double* pools()
#         unsigned int* flags()
#         bool clamped(unsigned int)
#         void setCount(unsigned int, double)
#         void setClamped(unsigned int, bool)
#         unsigned int countSReacs()
#         unsigned int sreacG2L(unsigned int)
#         SReacdef* sreacdef(unsigned int)
#         int sreac_dep_I(unsigned int, unsigned int)
#         int sreac_dep_S(unsigned int, unsigned int)
#         int sreac_dep_O(unsigned int, unsigned int)
#         unsigned int* sreac_lhs_I_bgn(unsigned int)
#         unsigned int* sreac_lhs_I_end(unsigned int)
#         unsigned int* sreac_lhs_S_bgn(unsigned int)
#         unsigned int* sreac_lhs_S_end(unsigned int)
#         unsigned int* sreac_lhs_O_bgn(unsigned int)
#         unsigned int* sreac_lhs_O_end(unsigned int)
#         int* sreac_upd_I_bgn(unsigned int)
#         int* sreac_upd_I_end(unsigned int)
#         int* sreac_upd_S_bgn(unsigned int)
#         int* sreac_upd_S_end(unsigned int)
#         int* sreac_upd_O_bgn(unsigned int)
#         int* sreac_upd_O_end(unsigned int)
#         unsigned int* srflags()
#         bool active(unsigned int)
#         double kcst(unsigned int)
#         unsigned int countSurfDiffs()
#         Diffdef* surfdiffdef(unsigned int)
#         unsigned int surfdiffG2L(unsigned int)
#         unsigned int surfdiff_dep(unsigned int, unsigned int)
#         double dcst(unsigned int)
#         unsigned int countOhmicCurrs()
#         unsigned int ohmiccurrG2L(unsigned int)
#         unsigned int ohmiccurrL2G(unsigned int)
#         OhmicCurrdef* ohmiccurrdef(unsigned int)
#         int ohmiccurr_dep_S(unsigned int, unsigned int)
#         unsigned int ohmiccurr_chanstate(unsigned int)
#         unsigned int countGHKcurrs()
#         unsigned int ghkcurrG2L(unsigned int)
#         unsigned int GHKcurrL2G(unsigned int)
#         GHKcurrdef* ghkcurrdef(unsigned int)
#         int ghkcurr_dep_S(unsigned int, unsigned int)
#         unsigned int ghkcurr_chanstate(unsigned int)
#         unsigned int ghkcurr_ion(unsigned int)
#         unsigned int countVDepTrans()
#         unsigned int vdeptransG2L(unsigned int)
#         unsigned int vdeptransL2G(unsigned int)
#         VDepTransdef* vdeptransdef(unsigned int)
#         int vdeptrans_dep_S(unsigned int, unsigned int)
#         unsigned int vdeptrans_srcchanstate(unsigned int)
#         unsigned int vdeptrans_dstchanstate(unsigned int)
#         unsigned int countVDepSReacs()
#         unsigned int vdepsreacG2L(unsigned int)
#         VDepSReacdef* vdepsreacdef(unsigned int)
#         int vdepsreac_dep_I(unsigned int, unsigned int)
#         int vdepsreac_dep_S(unsigned int, unsigned int)
#         int vdepsreac_dep_O(unsigned int, unsigned int)
#         unsigned int* vdepsreac_lhs_I_bgn(unsigned int)
#         unsigned int* vdepsreac_lhs_I_end(unsigned int)
#         unsigned int* vdepsreac_lhs_S_bgn(unsigned int)
#         unsigned int* vdepsreac_lhs_S_end(unsigned int)
#         unsigned int* vdepsreac_lhs_O_bgn(unsigned int)
#         unsigned int* vdepsreac_lhs_O_end(unsigned int)
#         int* vdepsreac_upd_I_bgn(unsigned int)
#         int* vdepsreac_upd_I_end(unsigned int)
#         int* vdepsreac_upd_S_bgn(unsigned int)
#         int* vdepsreac_upd_S_end(unsigned int)
#         int* vdepsreac_upd_O_bgn(unsigned int)
#         int* vdepsreac_upd_O_end(unsigned int)
#         void setKcst(unsigned int, double)
#         void setActive(unsigned int, bool)
#         Patchdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/diffdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Diffdef ######
    cdef cppclass Diffdef:
        Diffdef(Statedef*, unsigned int, steps_model.Diff*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         double dcst()
#         unsigned int lig()
#         int dep(unsigned int)
#         bool reqspec(unsigned int)
#         void setup()
#         void setDcst(double)
#         Diffdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/ohmiccurrdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef OhmicCurrdef* OhmicCurrDefP
    ctypedef std.vector[OhmicCurrdef*] OhmicCurrDefPVec
    ctypedef std.vector[OhmicCurrdef*].iterator OhmicCurrDefPVecI
    ctypedef std.vector[OhmicCurrdef*].const_iterator OhmicCurrDefPVecCI

    ###### Cybinding for OhmicCurrdef ######
    cdef cppclass OhmicCurrdef:
        OhmicCurrdef(Statedef*, unsigned int, steps_model.OhmicCurr*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         void setup()
#         unsigned int gidx()
#         std.string name()
#         double getG()
#         double getERev()
#         unsigned int chanstate()
#         int dep(unsigned int)
#         bool req(unsigned int)
#         OhmicCurrdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/sreacdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for SReacdef ######
    cdef cppclass SReacdef:
        SReacdef(Statedef*, unsigned int, steps_model.SReac*)
#         #void checkpoint(std.fstream)
#         #void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         unsigned int order()
#         double kcst()
#         void setup()
#         bool inside()
#         bool reqInside()
#         bool outside()
#         bool reqOutside()
#         bool surf_surf()
#         unsigned int lhs_I(unsigned int)
#         unsigned int lhs_S(unsigned int)
#         unsigned int lhs_O(unsigned int)
#         int dep_I(unsigned int)
#         int dep_S(unsigned int)
#         int dep_O(unsigned int)
#         unsigned int rhs_I(unsigned int)
#         unsigned int rhs_S(unsigned int)
#         unsigned int rhs_O(unsigned int)
#         int upd_I(unsigned int)
#         int upd_S(unsigned int)
#         int upd_O(unsigned int)
#         bool reqspec_I(unsigned int)
#         bool reqspec_S(unsigned int)
#         bool reqspec_O(unsigned int)
#         std.vector[unsigned int].const_iterator beginUpdColl_I()
#         std.vector[unsigned int].const_iterator endUpdColl_I()
#         std.vector[unsigned int].const_iterator beginUpdColl_S()
#         std.vector[unsigned int].const_iterator endUpdColl_S()
#         std.vector[unsigned int].const_iterator beginUpdColl_O()
#         std.vector[unsigned int].const_iterator endUpdColl_O()
# 
# # ======================================================================================================================
# cdef extern from "steps/solver/types.hpp" namespace "steps::solver":
# # ----------------------------------------------------------------------------------------------------------------------
#     ctypedef unsigned int gidxT
#     ctypedef std.vector[unsigned int] gidxTVec
#     ctypedef std.vector[unsigned int].iterator gidxTVecI
#     ctypedef std.vector[unsigned int].const_iterator gidxTVecCI
#     ctypedef std.vector[unsigned int*] gidxTPVec
#     ctypedef std.vector[unsigned int*].iterator gidxTPVecI
#     ctypedef std.vector[unsigned int*].const_iterator gidxTPVecCI
#     ctypedef unsigned int lidxT
#     ctypedef std.vector[unsigned int] lidxTVec
#     ctypedef std.vector[unsigned int].iterator lidxTVecI
#     ctypedef std.vector[unsigned int].const_iterator lidxTVecCI
#     ctypedef std.vector[unsigned int*] lidxTPVec
#     ctypedef std.vector[unsigned int*].iterator lidxTPVecI
#     ctypedef std.vector[unsigned int*].const_iterator lidxTPVecCI
#     ctypedef int depT
#     ctypedef std.vector[int] depTVec
#     ctypedef std.vector[int].iterator depTVecI
#     ctypedef std.vector[int].const_iterator depTVecCI
# 
# ======================================================================================================================
cdef extern from "steps/solver/statedef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
#     ctypedef Specdef* SpecdefP
#     ctypedef std.vector[Specdef*] SpecdefPVec
#     ctypedef std.vector[Specdef*].iterator SpecdefPVecI
#     ctypedef std.vector[Specdef*].const_iterator SpecdefPVecCI
#     ctypedef Compdef* CompdefP
#     ctypedef std.vector[Compdef*] CompdefPVec
#     ctypedef std.vector[Compdef*].iterator CompdefPVecI
#     ctypedef std.vector[Compdef*].const_iterator CompdefPVecCI
#     ctypedef Patchdef* PatchdefP
#     ctypedef std.vector[Patchdef*] PatchdefPVec
#     ctypedef std.vector[Patchdef*].iterator PatchdefPVecI
#     ctypedef std.vector[Patchdef*].const_iterator PatchdefPVecCI
#     ctypedef Reacdef* ReacdefP
#     ctypedef std.vector[Reacdef*] ReacdefPVec
#     ctypedef std.vector[Reacdef*].iterator ReacdefPVecI
#     ctypedef std.vector[Reacdef*].const_iterator ReacdefPVecCI
#     ctypedef SReacdef* SReacdefP
#     ctypedef std.vector[SReacdef*] SReacdefPVec
#     ctypedef std.vector[SReacdef*].iterator SReacdefPVecI
#     ctypedef std.vector[SReacdef*].const_iterator SReacdefPVecCI
#     ctypedef Diffdef* DiffdefP
#     ctypedef std.vector[Diffdef*] DiffdefPVec
#     ctypedef std.vector[Diffdef*].iterator DiffdefPVecI
#     ctypedef std.vector[Diffdef*].const_iterator DiffdefPVecCI
#     ctypedef Diffdef* SurfDiffdefP
#     ctypedef std.vector[Diffdef*] SurfDiffdefPVec
#     ctypedef std.vector[Diffdef*].iterator SurfDiffdefPVecI
#     ctypedef std.vector[Diffdef*].const_iterator SurfDiffdefPVecCI
#     ctypedef Chandef* ChandefP
#     ctypedef std.vector[Chandef*] ChandefPVec
#     ctypedef std.vector[Chandef*].iterator ChandefPVecI
#     ctypedef std.vector[Chandef*].const_iterator ChandefPVecCI
#     ctypedef VDepTransdef* VDepTransdefP
#     ctypedef std.vector[VDepTransdef*] VDepTransdefPVec
#     ctypedef std.vector[VDepTransdef*].iterator VDepTransdefPVecI
#     ctypedef std.vector[VDepTransdef*].const_iterator VDepTransdefPVecCI
#     ctypedef VDepSReacdef* VDepSReacdefP
#     ctypedef std.vector[VDepSReacdef*] VDepSReacdefPVec
#     ctypedef std.vector[VDepSReacdef*].iterator VDepSReacdefPVecI
#     ctypedef std.vector[VDepSReacdef*].const_iterator VDepSReacdefPVecCI
#     ctypedef OhmicCurrdef* OhmicCurrdefP
#     ctypedef std.vector[OhmicCurrdef*] OhmicCurrdefPVec
#     ctypedef std.vector[OhmicCurrdef*].iterator OhmicCurrdefPVecI
#     ctypedef std.vector[OhmicCurrdef*].const_iterator OhmicCurrdefPVecCI
#     ctypedef GHKcurrdef* GHKcurrdefP
#     ctypedef std.vector[GHKcurrdef*] GHKcurrdefPVec
#     ctypedef std.vector[GHKcurrdef*].iterator GHKcurrdefPVecI
#     ctypedef std.vector[GHKcurrdef*].const_iterator GHKcurrdefPVecCI
#     ctypedef DiffBoundarydef* DiffBoundarydefP
#     ctypedef std.vector[DiffBoundarydef*] DiffBoundarydefPVec
#     ctypedef std.vector[DiffBoundarydef*].iterator DiffBoundarydefPVecI
#     ctypedef std.vector[DiffBoundarydef*].const_iterator DiffBoundarydefPVecCI
# 
    ###### Cybinding for Statedef ######
    cdef cppclass Statedef:
        Statedef(steps_model.Model*, steps_wm.Geom*, steps_rng.RNG*)
#         unsigned int getMembIdx(std.string)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         Compdef* compdef(unsigned int)
#         unsigned int countComps()
#         unsigned int getCompIdx(std.string)
#         unsigned int getCompIdx(steps_wm.Comp*)
#         std.vector[Compdef*] bgnComp()
#         std.vector[Compdef*] endComp()
#         Patchdef* patchdef(unsigned int)
#         unsigned int countPatches()
#         unsigned int getPatchIdx(std.string)
#         unsigned int getPatchIdx(steps_wm.Patch*)
#         std.vector[Patchdef*] bgnPatch()
#         std.vector[Patchdef*] endPatch()
#         unsigned int countSpecs()
#         Specdef* specdef(unsigned int)
#         unsigned int getSpecIdx(std.string)
#         unsigned int getSpecIdx(steps_model.Spec*)
#         unsigned int countReacs()
#         Reacdef* reacdef(unsigned int)
#         unsigned int getReacIdx(std.string)
#         unsigned int getReacIdx(steps_model.Reac*)
#         unsigned int countSReacs()
#         SReacdef* sreacdef(unsigned int)
#         unsigned int getSReacIdx(std.string)
#         unsigned int getSReacIdx(steps_model.SReac*)
#         unsigned int countDiffs()
#         Diffdef* diffdef(unsigned int)
#         unsigned int getDiffIdx(std.string)
#         unsigned int getDiffIdx(steps_model.Diff*)
#         unsigned int countSurfDiffs()
#         Diffdef* surfdiffdef(unsigned int)
#         unsigned int getSurfDiffIdx(std.string)
#         unsigned int getSurfDiffIdx(steps_model.Diff*)
#         unsigned int countVDepTrans()
#         VDepTransdef* vdeptransdef(unsigned int)
#         unsigned int getVDepTransIdx(std.string)
#         unsigned int getVDepTransIdx(steps_model.VDepTrans*)
#         unsigned int countVDepSReacs()
#         VDepSReacdef* vdepsreacdef(unsigned int)
#         unsigned int getVDepSReacIdx(std.string)
#         unsigned int getVDepSReacIdx(steps_model.VDepSReac*)
#         unsigned int countOhmicCurrs()
#         OhmicCurrdef* ohmiccurrdef(unsigned int)
#         unsigned int getOhmicCurrIdx(std.string)
#         unsigned int getOhmicCurrIdx(steps_model.OhmicCurr*)
#         unsigned int countGHKcurrs()
#         GHKcurrdef* ghkcurrdef(unsigned int)
#         unsigned int getGHKcurrIdx(std.string)
#         unsigned int getGHKcurrIdx(steps_model.GHKcurr*)
#         unsigned int countDiffBoundaries()
#         DiffBoundarydef* diffboundarydef(unsigned int)
#         unsigned int getDiffBoundaryIdx(std.string)
#         #unsigned int getDiffBoundaryIdx(steps_tetmesh.DiffBoundary*)
#         std.vector[DiffBoundarydef*] bgnDiffBoundary()
#         std.vector[DiffBoundarydef*] endDiffBoundary()
#         double time()
#         steps_model.Model* model()
#         steps_rng.RNG* rng()
#         void setTime(double)
#         void incTime(double)
#         void resetTime()
#         void incNSteps(unsigned int)
#         void resetNSteps()
#         unsigned int nsteps()
#         void setNSteps(unsigned int)
#         Statedef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/compdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef Compdef* CompDefP
    ctypedef std.vector[Compdef*] CompDefPVec
    ctypedef std.vector[Compdef*].iterator CompDefPVecI
    ctypedef std.vector[Compdef*].const_iterator CompDefPVecCI

    ###### Cybinding for Compdef ######
    cdef cppclass Compdef:
        Compdef(Statedef*, unsigned int, steps_wm.Comp*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         double vol()
#         unsigned int gidx()
#         std.string name()
#         void setup_references()
#         void setup_indices()
#         void addSpec(unsigned int)
#         void addIPatchdef(Patchdef*)
#         void addOPatchdef(Patchdef*)
#         void setVol(double)
#         void reset()
#         unsigned int countSpecs()
#         unsigned int specG2L(unsigned int)
#         unsigned int specL2G(unsigned int)
#         unsigned int* flags()
#         bool clamped(unsigned int)
#         double* pools()
#         void setCount(unsigned int, double)
#         void setClamped(unsigned int, bool)
#         unsigned int countReacs()
#         unsigned int reacG2L(unsigned int)
#         unsigned int* reac_lhs_bgn(unsigned int)
#         unsigned int* reac_lhs_end(unsigned int)
#         int* reac_upd_bgn(unsigned int)
#         int* reac_upd_end(unsigned int)
#         int reac_dep(unsigned int, unsigned int)
#         Reacdef* reacdef(unsigned int)
#         unsigned int* rflags()
#         bool active(unsigned int)
#         double kcst(unsigned int)
#         void setKcst(unsigned int, double)
#         void setActive(unsigned int, bool)
#         unsigned int countDiffs()
#         Diffdef* diffdef(unsigned int)
#         unsigned int diffG2L(unsigned int)
#         unsigned int diff_dep(unsigned int, unsigned int)
#         double dcst(unsigned int)
#         void setDcst(unsigned int, double)
#         Compdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/vdepsreacdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef VDepSReacdef* VDepSReacDefP
    ctypedef std.vector[VDepSReacdef*] VDepSReacDefPVec
    ctypedef std.vector[VDepSReacdef*].iterator VDepSReacDefPVecI
    ctypedef std.vector[VDepSReacdef*].const_iterator VDepSReacDefPVecCI

    ###### Cybinding for VDepSReacdef ######
    cdef cppclass VDepSReacdef:
        VDepSReacdef(Statedef*, unsigned int, steps_model.VDepSReac*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         void setup()
#         unsigned int gidx()
#         std.string name()
#         unsigned int order()
#         double getVDepK(double)
#         bool inside()
#         bool reqInside()
#         bool outside()
#         bool reqOutside()
#         bool surf_surf()
#         unsigned int lhs_I(unsigned int)
#         unsigned int lhs_S(unsigned int)
#         unsigned int lhs_O(unsigned int)
#         int dep_I(unsigned int)
#         int dep_S(unsigned int)
#         int dep_O(unsigned int)
#         unsigned int rhs_I(unsigned int)
#         unsigned int rhs_S(unsigned int)
#         unsigned int rhs_O(unsigned int)
#         int upd_I(unsigned int)
#         int upd_S(unsigned int)
#         int upd_O(unsigned int)
#         bool reqspec_I(unsigned int)
#         bool reqspec_S(unsigned int)
#         bool reqspec_O(unsigned int)
#         std.vector[unsigned int].const_iterator beginUpdColl_I()
#         std.vector[unsigned int].const_iterator endUpdColl_I()
#         std.vector[unsigned int].const_iterator beginUpdColl_S()
#         std.vector[unsigned int].const_iterator endUpdColl_S()
#         std.vector[unsigned int].const_iterator beginUpdColl_O()
#         std.vector[unsigned int].const_iterator endUpdColl_O()
#         VDepSReacdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/specdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Specdef ######
    cdef cppclass Specdef:
        Specdef(Statedef*, unsigned int, steps_model.Spec*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         void setup()
#         Specdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/vdeptransdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef VDepTransdef* VDepTransDefP
    ctypedef std.vector[VDepTransdef*] VDepTransDefPVec
    ctypedef std.vector[VDepTransdef*].iterator VDepTransDefPVecI
    ctypedef std.vector[VDepTransdef*].const_iterator VDepTransDefPVecCI

    ###### Cybinding for VDepTransdef ######
    cdef cppclass VDepTransdef:
        VDepTransdef(Statedef*, unsigned int, steps_model.VDepTrans*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         void setup()
#         unsigned int gidx()
#         std.string name()
#         double getVDepRate(double)
#         unsigned int srcchanstate()
#         unsigned int dstchanstate()
#         int dep(unsigned int)
#         bool req(unsigned int)
#         VDepTransdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/ghkcurrdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef GHKcurrdef* GHKcurrDefP
    ctypedef std.vector[GHKcurrdef*] GHKcurrDefPVec
    ctypedef std.vector[GHKcurrdef*].iterator GHKcurrDefPVecI
    ctypedef std.vector[GHKcurrdef*].const_iterator GHKcurrDefPVecCI

    ###### Cybinding for GHKcurrdef ######
    cdef cppclass GHKcurrdef:
        GHKcurrdef(Statedef*, unsigned int, steps_model.GHKcurr*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         void setup()
#         unsigned int gidx()
#         std.string name()
#         unsigned int ion()
#         bool realflux()
#         double voconc()
#         double vshift()
#         double perm()
#         int valence()
#         unsigned int chanstate()
#         int dep(unsigned int)
#         bool req(unsigned int)
#         int dep_v(unsigned int)
#         bool req_v(unsigned int)
#         GHKcurrdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/reacdef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Reacdef ######
    cdef cppclass Reacdef:
        Reacdef(Statedef*, unsigned int, steps_model.Reac*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         unsigned int order()
#         double kcst()
#         unsigned int lhs(unsigned int)
#         int dep(unsigned int)
#         unsigned int rhs(unsigned int)
#         int upd(unsigned int)
#         bool reqspec(unsigned int)
#         std.vector[unsigned int].const_iterator bgnUpdColl()
#         std.vector[unsigned int].const_iterator endUpdColl()
#         void setup()
#         Reacdef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/chandef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Chandef ######
    cdef cppclass Chandef:
        Chandef(Statedef*, unsigned int, steps_model.Chan*)
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         unsigned int* chanstates()
#         unsigned int nchanstates()
#         void setup()
#         Chandef()
# 
# ======================================================================================================================
cdef extern from "steps/solver/diffboundarydef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef DiffBoundarydef* DiffBoundaryDefP
    ctypedef std.vector[DiffBoundarydef*] DiffBoundaryDefPVec
    ctypedef std.vector[DiffBoundarydef*].iterator DiffBoundaryDefPVecI
    ctypedef std.vector[DiffBoundarydef*].const_iterator DiffBoundaryDefPVecCI

    ###### Cybinding for DiffBoundarydef ######
    cdef cppclass DiffBoundarydef:
        #The constructor requires another namespace
        pass
        #DiffBoundarydef(Statedef*, unsigned int, steps_tetmesh.DiffBoundary*)
#         void setup()
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         std.vector[unsigned int] tris()
#         unsigned int compa()
#         unsigned int compb()
#         DiffBoundarydef()

# ======================================================================================================================
cdef extern from "steps/solver/sdiffboundarydef.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef SDiffBoundarydef* SDiffBoundaryDefP
    ctypedef std.vector[SDiffBoundarydef*] SDiffBoundaryDefPVec
    ctypedef std.vector[SDiffBoundarydef*].iterator SDiffBoundaryDefPVecI
    ctypedef std.vector[SDiffBoundarydef*].const_iterator SDiffBoundaryDefPVecCI

    ###### Cybinding for DiffBoundarydef ######
    cdef cppclass SDiffBoundarydef:
        #The constructor requires another namespace
        pass
        #SDiffBoundarydef(Statedef*, unsigned int, steps_tetmesh.SDiffBoundary*)
#         void setup()
#         void checkpoint(std.fstream)
#         void restore(std.fstream)
#         unsigned int gidx()
#         std.string name()
#         std.vector[unsigned int] tris()
#         unsigned int compa()
#         unsigned int compb()
#         DiffBoundarydef()

# ======================================================================================================================
cdef extern from "steps/solver/api.hpp" namespace "steps::solver::API":
# ----------------------------------------------------------------------------------------------------------------------
    enum EF_solver:
        EF_NONE
        EF_DEFAULT
        EF_DV_BDSYS
        EF_DV_SLUSYS
        EF_DV_PETSC

# ======================================================================================================================
cdef extern from "steps/solver/api.hpp" namespace "steps::solver":
# ----------------------------------------------------------------------------------------------------------------------

    cdef cppclass API:
    ###### Cybinding for API ######
        API(steps_model.Model*, steps_wm.Geom*, steps_rng.RNG*)
        std.string getSolverName()
        std.string getSolverDesc()
        std.string getSolverAuthors()
        std.string getSolverEmail()
        void checkpoint(std.string)
        void restore(std.string)
        void reset()
        void run(double)
        void advance(double)
        void step()
        void setRk4DT(double)
        void setDT(double)
        void setEfieldDT(double)
        void setNSteps(unsigned int)
        void setTime(double)
        void setTemp(double)
        double getTime()
        double getRk4DT()
        double getDT()
        double getEfieldDT()
        double getTemp()
        double getA0()
        unsigned int getNSteps()
        double getCompVol(std.string)
        void setCompVol(std.string, double)
        double getCompCount(std.string, std.string)
        void setCompCount(std.string, std.string, double)
        double getCompAmount(std.string, std.string)
        void setCompAmount(std.string, std.string, double)
        double getCompConc(std.string, std.string)
        void setCompConc(std.string, std.string, double)
        bool getCompClamped(std.string, std.string)
        void setCompClamped(std.string, std.string, bool)
        double getCompReacK(std.string, std.string)
        void setCompReacK(std.string, std.string, double)
        bool getCompReacActive(std.string, std.string)
        void setCompReacActive(std.string, std.string, bool)
        double getCompDiffD(std.string, std.string)
        void setCompDiffD(std.string, std.string, double)
        bool getCompDiffActive(std.string, std.string)
        void setCompDiffActive(std.string, std.string, bool)
        double getCompReacC(std.string, std.string)
        double getCompReacH(std.string, std.string)
        double getCompReacA(std.string, std.string)
        unsigned int getCompReacExtent(std.string, std.string)
        void resetCompReacExtent(std.string, std.string)
        double getTetVol(unsigned int)
        void setTetVol(unsigned int, double)
        bool getTetSpecDefined(unsigned int, std.string)
        double getTetCount(unsigned int, std.string)
        void setTetCount(unsigned int, std.string, double)
        double getTetAmount(unsigned int, std.string)
        void setTetAmount(unsigned int, std.string, double)
        double getTetConc(unsigned int, std.string)
        void setTetConc(unsigned int, std.string, double)
        bool getTetClamped(unsigned int, std.string)
        void setTetClamped(unsigned int, std.string, bool)
        double getTetReacK(unsigned int, std.string)
        void setTetReacK(unsigned int, std.string, double)
        bool getTetReacActive(unsigned int, std.string)
        void setTetReacActive(unsigned int, std.string, bool)
        double getTetDiffD(unsigned int, std.string, unsigned int)
        void setTetDiffD(unsigned int, std.string, double, unsigned int)
        bool getTetDiffActive(unsigned int, std.string)
        void setTetDiffActive(unsigned int, std.string, bool)
        double getTetReacC(unsigned int, std.string)
        double getTetReacH(unsigned int, std.string)
        double getTetReacA(unsigned int, std.string)
        double getTetDiffA(unsigned int, std.string)
        double getTetV(unsigned int)
        void setTetV(unsigned int, double)
        bool getTetVClamped(unsigned int)
        void setTetVClamped(unsigned int, bool)
        double getPatchArea(std.string)
        void setPatchArea(std.string, double)
        double getPatchCount(std.string, std.string)
        void setPatchCount(std.string, std.string, double)
        double getPatchAmount(std.string, std.string)
        void setPatchAmount(std.string, std.string, double)
        bool getPatchClamped(std.string, std.string)
        void setPatchClamped(std.string, std.string, bool)
        double getPatchSReacK(std.string, std.string)
        void setPatchSReacK(std.string, std.string, double)
        bool getPatchSReacActive(std.string, std.string)
        void setPatchSReacActive(std.string, std.string, bool)
        double getPatchSReacC(std.string, std.string)
        double getPatchSReacH(std.string, std.string)
        double getPatchSReacA(std.string, std.string)
        unsigned int getPatchSReacExtent(std.string, std.string)
        void resetPatchSReacExtent(std.string, std.string)
        bool getPatchVDepSReacActive(std.string, std.string)
        void setPatchVDepSReacActive(std.string, std.string, bool)
        void setDiffBoundaryDiffusionActive(std.string, std.string, bool)
        bool getDiffBoundaryDiffusionActive(std.string, std.string)
        void setDiffBoundaryDcst(std.string, std.string, double, std.string)
        void setSDiffBoundaryDiffusionActive(std.string, std.string, bool)
        bool getSDiffBoundaryDiffusionActive(std.string, std.string)
        void setSDiffBoundaryDcst(std.string, std.string, double, std.string)
        double getTriArea(unsigned int)
        void setTriArea(unsigned int, double)
        bool getTriSpecDefined(unsigned int, std.string)
        double getTriCount(unsigned int, std.string)
        void setTriCount(unsigned int, std.string, double)
        double getTriAmount(unsigned int, std.string)
        void setTriAmount(unsigned int, std.string, double)
        bool getTriClamped(unsigned int, std.string)
        void setTriClamped(unsigned int, std.string, bool)
        double getTriSReacK(unsigned int, std.string)
        void setTriSReacK(unsigned int, std.string, double)
        bool getTriSReacActive(unsigned int, std.string)
        void setTriSReacActive(unsigned int, std.string, bool)
        double getTriSReacC(unsigned int, std.string)
        double getTriSReacH(unsigned int, std.string)
        double getTriSReacA(unsigned int, std.string)
        double getTriDiffD(unsigned int, std.string, unsigned int)
        double getTriSDiffD(unsigned int, std.string, unsigned int)
        void setTriDiffD(unsigned int, std.string, double, unsigned int)
        void setTriSDiffD(unsigned int, std.string, double, unsigned int)
        double getTriV(unsigned int)
        void setTriV(unsigned int, double)
        bool getTriVClamped(unsigned int)
        void setTriVClamped(unsigned int, bool)
        double getTriOhmicI(unsigned int)
        double getTriOhmicI(unsigned int, std.string)
        double getTriGHKI(unsigned int)
        double getTriGHKI(unsigned int, std.string)
        double getTriI(unsigned int)
        void setTriIClamp(unsigned int, double)
        bool getTriVDepSReacActive(unsigned int, std.string)
        void setTriVDepSReacActive(unsigned int, std.string, bool)
        void setTriCapac(unsigned int, double)
        double getVertV(unsigned int)
        void setVertV(unsigned int, double)
        bool getVertVClamped(unsigned int)
        void setVertVClamped(unsigned int, bool)
        void setVertIClamp(unsigned int, double)
        void setMembPotential(std.string, double)
        void setMembCapac(std.string, double)
        void setMembVolRes(std.string, double)
        void setMembRes(std.string, double, double)
        unsigned int getNComps()
        unsigned int getNPatches()
        std.string getCompName(unsigned int)
        std.string getPatchName(unsigned int)
        unsigned int getNCompSpecs(unsigned int)
        unsigned int getNPatchSpecs(unsigned int)
        std.string getCompSpecName(unsigned int, unsigned int)
        std.string getPatchSpecName(unsigned int, unsigned int)
        std.vector[double] getBatchTetCounts(std.vector[unsigned int], std.string)
        std.vector[double] getBatchTriCounts(std.vector[unsigned int], std.string)
        void getBatchTetCountsNP(unsigned int*, int, std.string, double*, int)
        void getBatchTriCountsNP(unsigned int*, int, std.string, double*, int)
        std.vector[double] getROITetCounts(std.string, std.string)
        std.vector[double] getROITriCounts(std.string, std.string)
        void getROITetCountsNP(std.string, std.string, double*, int)
        void getROITriCountsNP(std.string, std.string, double*, int)
        double getROIVol(std.string)
        double getROIArea(std.string)
        double getROICount(std.string, std.string)
        void setROICount(std.string, std.string, double)
        double getROIAmount(std.string, std.string)
        double getROIConc(std.string, std.string)
        void setROIConc(std.string, std.string, double)
        void setROIClamped(std.string, std.string, bool)
        void setROIReacK(std.string, std.string, double)
        void setROISReacK(std.string, std.string, double)
        void setROIDiffD(std.string, std.string, double)
        void setROIReacActive(std.string, std.string, bool)
        void setROISReacActive(std.string, std.string, bool)
        void setROIDiffActive(std.string, std.string, bool)
        void setROIVDepSReacActive(std.string, std.string, bool)
        unsigned int getROIReacExtent(std.string, std.string)
        void resetROIReacExtent(std.string, std.string)
        unsigned int getROISReacExtent(std.string, std.string)
        void resetROISReacExtent(std.string, std.string)
        unsigned int getROIDiffExtent(std.string, std.string)
        void resetROIDiffExtent(std.string, std.string)
