# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from cython.operator cimport dereference as deref
cimport std
cimport steps_model
from steps_common cimport *



# ======================================================================================================================
cdef extern from "geom/comp.hpp" namespace "steps::wm":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef Comp* CompP
    ctypedef std.map[std.string,Comp*] CompPMap
    ctypedef std.map[std.string,Comp*].iterator CompPMapI
    ctypedef std.map[std.string,Comp*].const_iterator CompPMapCI
    ctypedef std.vector[Comp*] CompPVec
    ctypedef std.vector[Comp*].iterator CompPVecI
    ctypedef std.vector[Comp*].const_iterator CompPVecCI

    ###### Cybinding for Comp ######
    cdef cppclass Comp:
        Comp(std.string, Geom, double) except +
        std.string getID()
        void setID(std.string) except +
        Geom& getContainer()
        double getVol()
        void addVolsys(std.string) except +
        flat_set[std.string] getVolsys()
        void delVolsys(std.string) except +
        flat_set[steps_model.Spec*] getAllSpecs(steps_model.Model) except +
        flat_set[steps_model.Reac*] getAllReacs(steps_model.Model) except +
        flat_set[steps_model.Diff*] getAllDiffs(steps_model.Model) except +
        flat_set[Patch*] getIPatches()
        flat_set[Patch*] getOPatches()
        void setVol(double vol) except +

# ======================================================================================================================
cdef extern from "geom/patch.hpp" namespace "steps::wm":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef Patch* PatchP
    ctypedef std.map[std.string,Patch*] PatchPMap
    ctypedef std.map[std.string,Patch*].iterator PatchPMapI
    ctypedef std.map[std.string,Patch*].const_iterator PatchPMapCI
    ctypedef std.vector[Patch*] PatchPVec
    ctypedef std.vector[Patch*].iterator PatchPVecI
    ctypedef std.vector[Patch*].const_iterator PatchPVecCI

    ###### Cybinding for Patch ######
    cdef cppclass Patch:
        Patch(std.string, Geom&, Comp&, Comp*, double) except +
        std.string getID()
        void setID(std.string) except +
        Geom& getContainer()
        double getArea()
        void setArea(double area) except +
        void addSurfsys(std.string) except +
        flat_set[std.string] getSurfsys()
        void delSurfsys(std.string) except +
        flat_set[steps_model.Spec*] getAllSpecs(steps_model.Model)
        flat_set[steps_model.SReac*] getAllSReacs(steps_model.Model)
        Comp& getIComp()
        Comp* getOComp()

# ======================================================================================================================
cdef extern from "geom/geom.hpp" namespace "steps::wm":
# ----------------------------------------------------------------------------------------------------------------------

    ###### Cybinding for Geom ######
    cdef cppclass Geom:
        Geom()
        Comp& getComp(std.string) except +
        void delComp(std.string) except +
        std.vector[Comp*] getAllComps()
        Patch& getPatch(std.string) except +
        void delPatch(std.string) except +
        std.vector[Patch*] getAllPatches()

