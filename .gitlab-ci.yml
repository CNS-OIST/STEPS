include:
- project: hpc/gitlab-pipelines
  file:
    - github-project-pipelines.gitlab-ci.yml
    - spack-build-ctest.gitlab-ci.yml
- project: hpc/gitlab-upload-logs
  file: enable-upload.yml

default:
  tags: [bb5_map]

# setup phase

spack_setup:
  extends: .spack_setup_ccache

# build phase

spack_build:
  extends: .spack_build
  variables:
    SPACK_PACKAGE_SPEC: +codechecks build_type=RelWithDebInfoAndAssert

spack variants 1/4:
  extends: "spack_build"
  variables:
    SPACK_PACKAGE_SPEC: +distmesh~petsc

spack variants 2/4:
  extends: "spack_build"
  variables:
    SPACK_PACKAGE_SPEC: ~distmesh~petsc

spack variants 3/4:
  extends: "spack_build"
  variables:
    SPACK_PACKAGE_SPEC: ^petsc+complex~hypre

spack variants 4/4:
  extends: "spack_build"
  variables:
    SPACK_PACKAGE_SPEC: ^petsc+complex~hypre
    SPACK_PACKAGE_DEPENDENCIES: ^sundials@:2

perf_mon_spack_build:
  extends: .spack_build
  variables:
    SPACK_PACKAGE_SPEC: +caliper build_type=RelWithDebInfoAndAssert

# test phase

steps4_simple_model:
  needs: ["spack_build"]
  extends: .spack_test

ctest:
  needs: ["spack_build"]

variables:
  GIT_SUBMODULE_STRATEGY: normal
  SPACK_EXTRA_MODULES: llvm
  SPACK_PACKAGE: steps

arm64_macOS_brew:
  tags: [macos-arm64]
  stage: build
  script:
    - python3 -m virtualenv venv
    - venv/bin/pip install --upgrade pip -r requirements.txt
    - source venv/bin/activate
    - mkdir build && cd build
    - >
      cmake_args=(-DCMAKE_BUILD_TYPE=RelWithDebInfoAndAssert
                  -DCMAKE_INSTALL_PREFIX=$PWD/../install
                  -DBUILD_TESTING:BOOL=False
                  -DPython_EXECUTABLE=$PWD/../venv/bin/python3
                  -DSTEPS_USE_DIST_MESH:BOOL=TRUE
                  -DUSE_MPI=True
                  -DUSE_PETSC=True)
    - cmake .. ${cmake_args[@]}
    - cmake --build . --parallel
    - ctest --output-on-failure
    - cmake --build . --target install

arm64_macOS_miniconda:
  tags: [macos-arm64]
  stage: build
  script:
    - export PATH=$HOME/miniconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    - export CMAKE_PREFIX_PATH=$HOME/miniconda3
    - export MPICH_FC=$HOME/miniconda3/bin/gfortran
    - export MPICH_CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
    - export MPICH_CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++
    - export CC=mpicc
    - export CXX=mpicxx
    - mkdir build && cd build
    - >
      cmake_args=(-DCMAKE_BUILD_TYPE=RelWithDebInfoAndAssert
                  -DBUILD_TESTING:BOOL=False
                  -DSTEPS_INSTALL_PYTHON_DEPS:BOOL=False
                  -DCMAKE_INSTALL_PREFIX=$PWD/../install
                  -DSTEPS_USE_STEPSBLENDER:BOOL=False
                  -DSTEPS_USE_DIST_MESH:BOOL=TRUE
                  -DPython_EXECUTABLE=$HOME/miniconda3/bin/python
                  -DUSE_MPI=True
                  -DUSE_PETSC=True)
    - cmake .. ${cmake_args[@]}
    - cmake --build . --parallel
    - ctest --output-on-failure
    - cmake --build . --target install

# deactivated Docker container builds

.basic_ci:
  variables:
    GIT_STRATEGY: fetch
    KUBERNETES_CPU_LIMIT: 4500m  # Add a bit more for 4 build process + management overhead
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
    BUILD_DIR: _build_ubuntu
  tags: [kubernetes]
  stage: build
  before_script:
    - free -m | grep -v "Swap" # RAM
    - df -h| grep -E "Filesystem|overlay" # storage
    - lscpu | grep -E "^CPU\(s\)" # CPUs
    - rm -rf _build_ubuntu

.ubuntu/20.04:
  extends: [.basic_ci]
  only:
    - external_pull_requests
  except:
    - schedules
  image:
    name: cnsoist/steps:gitlab-20211022
  script:
    - cmake -B $BUILD_DIR -S . -DUSE_BUNDLE_SUNDIALS:BOOL=FALSE
    - cmake --build $BUILD_DIR -v -j$KUBERNETES_CPU_REQUEST
    - cd $BUILD_DIR
    - ctest --verbose

.ubuntu/18.04:
  extends: [.basic_ci]
  only:
    - external_pull_requests
  except:
    - schedules
  image:
    name: cnsoist/steps:gitlab-1804-20210705
  script:
    - cmake -B $BUILD_DIR -S . -DUSE_BUNDLE_SUNDIALS:BOOL=FALSE
    - cmake --build $BUILD_DIR -v -j$KUBERNETES_CPU_REQUEST

.bundle-ubuntu/20.04:
  extends: [.basic_ci]
  image:
    name: cnsoist/steps:gitlab
  only:
    - master
    - schedules
  script:
    - apt-get update
    - apt-get install -y libboost-dev libboost-chrono-dev libboost-system-dev libboost-timer-dev
    - cmake -B $BUILD_DIR -S . -DUSE_BUNDLE_SUNDIALS=ON -DUSE_BUNDLE_OMEGA_H=ON
    - cmake --build $BUILD_DIR -v -j$KUBERNETES_CPU_REQUEST
    - cd $BUILD_DIR
    - ctest --verbose

.bundle-ubuntu/18.04:
  extends: [.basic_ci]
  image:
     name: cnsoist/steps:gitlab-18.04
  only:
    - master
    - schedules
  script:
    - apt-get update
    - apt-get install -y libboost-dev libboost-chrono-dev libboost-system-dev libboost-timer-dev
    - cmake -B $BUILD_DIR -S . -DUSE_BUNDLE_SUNDIALS=ON -DUSE_BUNDLE_OMEGA_H=ON
    - cmake --build $BUILD_DIR -v -j$KUBERNETES_CPU_REQUEST
    - cd $BUILD_DIR
    - ctest --verbose -E parallel-python # 18.04 docker image has issues with mpi

# Automated Performance Monitoring (perf_mon)

.perf_mon_kernel:
  stage: test
  needs: ["perf_mon_spack_build"]
  when: manual
  timeout: 72 hours
  variables:
    bb5_memory: 1G
    bb5_ntasks: 1
    bb5_cpus_per_task: 1
    bb5_constraint: cpu
    bb5_qos: longjob
    bb5_duration: "72:00:00"
  script:
    - . ${SPACK_ROOT}/share/spack/setup-env.sh
    - spack load /${SPACK_INSTALLED_HASH}
    - .ci/automated_performance_monitoring.sh

perf_mon 1/3:
  extends: .perf_mon_kernel
  variables:
    PERF_MON_MODEL_NAME: SimpleModel
    compare_with: perfRes_STEPS4.0Paper
    # nc stands for number of cores
    # spawned jobs use this amount of cores (evenly distributed across used nodes)
    nc: 32 512 2048

perf_mon 2/3:
  extends: .perf_mon_kernel
  variables:
    PERF_MON_MODEL_NAME: CaBurstBackground
    mesh: CaBurstUnifiedMesh
    compare_with: perfRes_STEPS4.0Paper
    nc: 32 512 4096

perf_mon 3/3:
  extends: .perf_mon_kernel
  variables:
    PERF_MON_MODEL_NAME: CaBurstFullModel
    mesh: CaBurstUnifiedMesh
    compare_with: perfRes_STEPS4.0Paper
    nc: 32 512 4096

# Automated Validation Monitoring (val_mon)

.val_mon_kernel:
  stage: test
  needs: ["spack_build"]
  timeout: 24 hours
  tags: [bb5_map]
  variables:
    bb5_memory: 1G
    bb5_ntasks: 1
    bb5_cpus_per_task: 1
    bb5_constraint: cpu
    bb5_qos: longjob
    bb5_duration: "24:00:00"
  script:
    # Load the Spack installation that knows about the package to be tested.
    - . ${SPACK_ROOT}/share/spack/setup-env.sh
    - spack load /${SPACK_INSTALLED_HASH}
    - .ci/automated_validation_monitoring.sh

val_mon_rallpack1:
  extends: .val_mon_kernel
  when: manual
  variables:
    model_name: rallpack1
    slurm_job_name: rallpack1_val_mon_CI
    simulation_dir: rallpack1
    compare_with: ref_PR_1000_2971c406/raw_traces/STEPS3
    steps_version: 4

val_mon_rallpack3:
  extends: .val_mon_kernel
  when: manual
  variables:
    bb5_memory: 2G
    model_name: rallpack3
    slurm_job_name: rallpack3_val_mon_CI
    simulation_dir: rallpack3
    compare_with: ref_PR_1000_2971c406/raw_traces/STEPS3
    steps_version: 4


val_mon_caburst:
  extends: .val_mon_kernel
  when: manual
  variables:
    model_name: caburst
    slurm_job_name: caburst_val_mon_CI
    simulation_dir: caBurst/full/validations
    compare_with: ref_PR_1000_2971c406/raw_traces/STEPS3
    steps_version: 4

# kill the spawned slurm jobs
# This job kills all the submitted jobs with the names below (only the ones submitted by the CI).
# Therefore, it could potentially kill the perf_mon from other PRs/MRs.
# It is a hard RESET of perf_mon in case of troubles in BB5.

scancel_perf_mon:
  stage: test
  when: manual
  script:
    - for nc in 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192; do scancel --jobname=CI_perf_mon_strong_scaling_$nc; done
    - for nc in 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192; do scancel --jobname=CI_perf_mon_caliper_$nc; done

scancel_val_mon_rallpack1:
  stage: test
  when: manual
  script:
    - scancel --jobname=rallpack1_val_mon_CI

scancel_val_mon_rallpack3:
  stage: test
  when: manual
  script:
    - scancel --jobname=rallpack3_val_mon_CI

scancel_val_mon_caburst:
  stage: test
  when: manual
  script:
    - scancel --jobname=caburst_val_mon_CI
