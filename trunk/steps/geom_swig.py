# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _geom_swig
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _geom_swig.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _geom_swig.PySwigIterator_value(*args)
    def incr(*args): return _geom_swig.PySwigIterator_incr(*args)
    def decr(*args): return _geom_swig.PySwigIterator_decr(*args)
    def distance(*args): return _geom_swig.PySwigIterator_distance(*args)
    def equal(*args): return _geom_swig.PySwigIterator_equal(*args)
    def copy(*args): return _geom_swig.PySwigIterator_copy(*args)
    def next(*args): return _geom_swig.PySwigIterator_next(*args)
    def previous(*args): return _geom_swig.PySwigIterator_previous(*args)
    def advance(*args): return _geom_swig.PySwigIterator_advance(*args)
    def __eq__(*args): return _geom_swig.PySwigIterator___eq__(*args)
    def __ne__(*args): return _geom_swig.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _geom_swig.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _geom_swig.PySwigIterator___isub__(*args)
    def __add__(*args): return _geom_swig.PySwigIterator___add__(*args)
    def __sub__(*args): return _geom_swig.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _geom_swig.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Err(_object):
    """Proxy of C++ Err class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Err, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Err, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> Err
        __init__(self) -> Err
        """
        this = _geom_swig.new_Err(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMsg(*args):
        """getMsg(self) -> char"""
        return _geom_swig.Err_getMsg(*args)

    __swig_destroy__ = _geom_swig.delete_Err
    __del__ = lambda self : None;
Err_swigregister = _geom_swig.Err_swigregister
Err_swigregister(Err)

class ArgErr(Err):
    """Proxy of C++ ArgErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArgErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> ArgErr
        __init__(self) -> ArgErr
        """
        this = _geom_swig.new_ArgErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_ArgErr
    __del__ = lambda self : None;
ArgErr_swigregister = _geom_swig.ArgErr_swigregister
ArgErr_swigregister(ArgErr)

class NotImplErr(Err):
    """Proxy of C++ NotImplErr class"""
    __swig_setmethods__ = {}
    for _s in [Err]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplErr, name, value)
    __swig_getmethods__ = {}
    for _s in [Err]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplErr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg="") -> NotImplErr
        __init__(self) -> NotImplErr
        """
        this = _geom_swig.new_NotImplErr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_NotImplErr
    __del__ = lambda self : None;
NotImplErr_swigregister = _geom_swig.NotImplErr_swigregister
NotImplErr_swigregister(NotImplErr)

class set_str(_object):
    """Proxy of C++ set_str class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_str, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.set_str_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.set_str___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.set_str___len__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.set_str_append(*args)

    def __contains__(*args):
        """__contains__(self, value_type x) -> bool"""
        return _geom_swig.set_str___contains__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.set_str___getitem__(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> set_str
        __init__(self, set_str ?) -> set_str
        """
        this = _geom_swig.new_set_str(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.set_str_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.set_str_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.set_str_clear(*args)

    def swap(*args):
        """swap(self, set_str v)"""
        return _geom_swig.set_str_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.set_str_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.set_str_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.set_str_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.set_str_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.set_str_rend(*args)

    def count(*args):
        """count(self, key_type x) -> size_type"""
        return _geom_swig.set_str_count(*args)

    def erase(*args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _geom_swig.set_str_erase(*args)

    def find(*args):
        """find(self, key_type x) -> iterator"""
        return _geom_swig.set_str_find(*args)

    def lower_bound(*args):
        """lower_bound(self, key_type x) -> iterator"""
        return _geom_swig.set_str_lower_bound(*args)

    def upper_bound(*args):
        """upper_bound(self, key_type x) -> iterator"""
        return _geom_swig.set_str_upper_bound(*args)

    def equal_range(*args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(std::string)>::iterator,std::set<(std::string)>::iterator)>"""
        return _geom_swig.set_str_equal_range(*args)

    def insert(*args):
        """insert(self, value_type __x) -> std::pair<(std::set<(std::string)>::iterator,bool)>"""
        return _geom_swig.set_str_insert(*args)

    __swig_destroy__ = _geom_swig.delete_set_str
    __del__ = lambda self : None;
set_str_swigregister = _geom_swig.set_str_swigregister
set_str_swigregister(set_str)

class set_ptc(_object):
    """Proxy of C++ set_ptc class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_ptc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_ptc, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.set_ptc_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.set_ptc___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.set_ptc___len__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.set_ptc_append(*args)

    def __contains__(*args):
        """__contains__(self, value_type x) -> bool"""
        return _geom_swig.set_ptc___contains__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.set_ptc___getitem__(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> set_ptc
        __init__(self, set_ptc ?) -> set_ptc
        """
        this = _geom_swig.new_set_ptc(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.set_ptc_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.set_ptc_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.set_ptc_clear(*args)

    def swap(*args):
        """swap(self, set_ptc v)"""
        return _geom_swig.set_ptc_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.set_ptc_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.set_ptc_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.set_ptc_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.set_ptc_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.set_ptc_rend(*args)

    def count(*args):
        """count(self, key_type x) -> size_type"""
        return _geom_swig.set_ptc_count(*args)

    def erase(*args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _geom_swig.set_ptc_erase(*args)

    def find(*args):
        """find(self, key_type x) -> iterator"""
        return _geom_swig.set_ptc_find(*args)

    def lower_bound(*args):
        """lower_bound(self, key_type x) -> iterator"""
        return _geom_swig.set_ptc_lower_bound(*args)

    def upper_bound(*args):
        """upper_bound(self, key_type x) -> iterator"""
        return _geom_swig.set_ptc_upper_bound(*args)

    def equal_range(*args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(p.steps::wm::Patch)>::iterator,std::set<(p.steps::wm::Patch)>::iterator)>"""
        return _geom_swig.set_ptc_equal_range(*args)

    def insert(*args):
        """insert(self, value_type __x) -> std::pair<(std::set<(p.steps::wm::Patch)>::iterator,bool)>"""
        return _geom_swig.set_ptc_insert(*args)

    __swig_destroy__ = _geom_swig.delete_set_ptc
    __del__ = lambda self : None;
set_ptc_swigregister = _geom_swig.set_ptc_swigregister
set_ptc_swigregister(set_ptc)

class vector_ptc(_object):
    """Proxy of C++ vector_ptc class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ptc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ptc, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_ptc_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_ptc___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_ptc___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_ptc_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_ptc"""
        return _geom_swig.vector_ptc___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_ptc v)"""
        return _geom_swig.vector_ptc___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_ptc___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_ptc___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_ptc___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_ptc___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_ptc_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_ptc_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_ptc_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_ptc_clear(*args)

    def swap(*args):
        """swap(self, vector_ptc v)"""
        return _geom_swig.vector_ptc_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_ptc_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_ptc_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_ptc_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_ptc_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_ptc_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_ptc_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_ptc_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_ptc
        __init__(self, vector_ptc ?) -> vector_ptc
        __init__(self, size_type size) -> vector_ptc
        __init__(self, size_type size, value_type value) -> vector_ptc
        """
        this = _geom_swig.new_vector_ptc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_ptc_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_ptc_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_ptc_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_ptc_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_ptc_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_ptc_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_ptc_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_ptc_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_ptc
    __del__ = lambda self : None;
vector_ptc_swigregister = _geom_swig.vector_ptc_swigregister
vector_ptc_swigregister(vector_ptc)

class vector_cmp(_object):
    """Proxy of C++ vector_cmp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_cmp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_cmp, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_cmp_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_cmp___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_cmp___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_cmp_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_cmp"""
        return _geom_swig.vector_cmp___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_cmp v)"""
        return _geom_swig.vector_cmp___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_cmp___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_cmp___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_cmp___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_cmp___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_cmp_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_cmp_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_cmp_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_cmp_clear(*args)

    def swap(*args):
        """swap(self, vector_cmp v)"""
        return _geom_swig.vector_cmp_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_cmp_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_cmp_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_cmp_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_cmp_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_cmp_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_cmp_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_cmp_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_cmp
        __init__(self, vector_cmp ?) -> vector_cmp
        __init__(self, size_type size) -> vector_cmp
        __init__(self, size_type size, value_type value) -> vector_cmp
        """
        this = _geom_swig.new_vector_cmp(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_cmp_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_cmp_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_cmp_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_cmp_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_cmp_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_cmp_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_cmp_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_cmp_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_cmp
    __del__ = lambda self : None;
vector_cmp_swigregister = _geom_swig.vector_cmp_swigregister
vector_cmp_swigregister(vector_cmp)

class vector_int(_object):
    """Proxy of C++ vector_int class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_int_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_int___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_int___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_int_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_int"""
        return _geom_swig.vector_int___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_int v)"""
        return _geom_swig.vector_int___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_int___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_int___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_int___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_int___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_int_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_int_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_int_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_int_clear(*args)

    def swap(*args):
        """swap(self, vector_int v)"""
        return _geom_swig.vector_int_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_int_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_int_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_int_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_int_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_int_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_int_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_int_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_int
        __init__(self, vector_int ?) -> vector_int
        __init__(self, size_type size) -> vector_int
        __init__(self, size_type size, value_type value) -> vector_int
        """
        this = _geom_swig.new_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_int_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_int_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_int_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_int_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_int_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_int_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_int_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_int_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_int
    __del__ = lambda self : None;
vector_int_swigregister = _geom_swig.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_uint(_object):
    """Proxy of C++ vector_uint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_uint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_uint, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_uint_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_uint___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_uint___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_uint_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_uint"""
        return _geom_swig.vector_uint___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_uint v)"""
        return _geom_swig.vector_uint___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_uint___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_uint___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_uint___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_uint___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_uint_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_uint_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_uint_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_uint_clear(*args)

    def swap(*args):
        """swap(self, vector_uint v)"""
        return _geom_swig.vector_uint_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_uint_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_uint_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_uint_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_uint_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_uint_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_uint_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_uint_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_uint
        __init__(self, vector_uint ?) -> vector_uint
        __init__(self, size_type size) -> vector_uint
        __init__(self, size_type size, value_type value) -> vector_uint
        """
        this = _geom_swig.new_vector_uint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_uint_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_uint_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_uint_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_uint_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_uint_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_uint_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_uint_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_uint_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_uint
    __del__ = lambda self : None;
vector_uint_swigregister = _geom_swig.vector_uint_swigregister
vector_uint_swigregister(vector_uint)

class vector_dbl(_object):
    """Proxy of C++ vector_dbl class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_dbl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_dbl, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_dbl_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_dbl___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_dbl___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_dbl_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_dbl"""
        return _geom_swig.vector_dbl___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_dbl v)"""
        return _geom_swig.vector_dbl___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_dbl___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_dbl___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_dbl___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_dbl___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_dbl_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_dbl_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_dbl_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_dbl_clear(*args)

    def swap(*args):
        """swap(self, vector_dbl v)"""
        return _geom_swig.vector_dbl_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_dbl_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_dbl_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_dbl_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_dbl_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_dbl_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_dbl_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_dbl_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_dbl
        __init__(self, vector_dbl ?) -> vector_dbl
        __init__(self, size_type size) -> vector_dbl
        __init__(self, size_type size, value_type value) -> vector_dbl
        """
        this = _geom_swig.new_vector_dbl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_dbl_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_dbl_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_dbl_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_dbl_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_dbl_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_dbl_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_dbl_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_dbl_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_dbl
    __del__ = lambda self : None;
vector_dbl_swigregister = _geom_swig.vector_dbl_swigregister
vector_dbl_swigregister(vector_dbl)

class vector_bool(_object):
    """Proxy of C++ vector_bool class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_bool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_bool, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _geom_swig.vector_bool_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _geom_swig.vector_bool___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _geom_swig.vector_bool___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _geom_swig.vector_bool_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vector_bool"""
        return _geom_swig.vector_bool___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vector_bool v)"""
        return _geom_swig.vector_bool___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _geom_swig.vector_bool___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _geom_swig.vector_bool___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _geom_swig.vector_bool___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _geom_swig.vector_bool___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _geom_swig.vector_bool_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _geom_swig.vector_bool_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _geom_swig.vector_bool_size(*args)

    def clear(*args):
        """clear(self)"""
        return _geom_swig.vector_bool_clear(*args)

    def swap(*args):
        """swap(self, vector_bool v)"""
        return _geom_swig.vector_bool_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _geom_swig.vector_bool_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _geom_swig.vector_bool_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _geom_swig.vector_bool_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_bool_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _geom_swig.vector_bool_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _geom_swig.vector_bool_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _geom_swig.vector_bool_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vector_bool
        __init__(self, vector_bool ?) -> vector_bool
        __init__(self, size_type size) -> vector_bool
        __init__(self, size_type size, value_type value) -> vector_bool
        """
        this = _geom_swig.new_vector_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _geom_swig.vector_bool_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _geom_swig.vector_bool_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _geom_swig.vector_bool_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _geom_swig.vector_bool_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _geom_swig.vector_bool_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _geom_swig.vector_bool_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _geom_swig.vector_bool_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _geom_swig.vector_bool_capacity(*args)

    __swig_destroy__ = _geom_swig.delete_vector_bool
    __del__ = lambda self : None;
vector_bool_swigregister = _geom_swig.vector_bool_swigregister
vector_bool_swigregister(vector_bool)


def isValidID(*args):
  """isValidID(string id) -> bool"""
  return _geom_swig.isValidID(*args)

def checkID(*args):
  """checkID(string id)"""
  return _geom_swig.checkID(*args)
class Geom(_object):
    """Proxy of C++ Geom class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Geom"""
        this = _geom_swig.new_Geom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_Geom
    __del__ = lambda self : None;
    def getComp(*args):
        """getComp(self, string id) -> Comp"""
        return _geom_swig.Geom_getComp(*args)

    def delComp(*args):
        """delComp(self, string id)"""
        return _geom_swig.Geom_delComp(*args)

    def getAllComps(*args):
        """getAllComps(self) -> vector_cmp"""
        return _geom_swig.Geom_getAllComps(*args)

    def getPatch(*args):
        """getPatch(self, string id) -> Patch"""
        return _geom_swig.Geom_getPatch(*args)

    def delPatch(*args):
        """delPatch(self, string id)"""
        return _geom_swig.Geom_delPatch(*args)

    def getAllPatches(*args):
        """getAllPatches(self) -> vector_ptc"""
        return _geom_swig.Geom_getAllPatches(*args)

Geom_swigregister = _geom_swig.Geom_swigregister
Geom_swigregister(Geom)

class Patch(_object):
    """Proxy of C++ Patch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Patch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Patch, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(self, string id, Geom container, Comp icomp, Comp ocomp=0, 
            double area=0.0) -> Patch
        """
        this = _geom_swig.new_Patch(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_Patch
    __del__ = lambda self : None;
    def getID(*args):
        """getID(self) -> string"""
        return _geom_swig.Patch_getID(*args)

    def setID(*args):
        """setID(self, string id)"""
        return _geom_swig.Patch_setID(*args)

    def getContainer(*args):
        """getContainer(self) -> Geom"""
        return _geom_swig.Patch_getContainer(*args)

    def getArea(*args):
        """getArea(self) -> double"""
        return _geom_swig.Patch_getArea(*args)

    def setArea(*args):
        """setArea(self, double vol)"""
        return _geom_swig.Patch_setArea(*args)

    def addSurfsys(*args):
        """addSurfsys(self, string id)"""
        return _geom_swig.Patch_addSurfsys(*args)

    def getSurfsys(*args):
        """getSurfsys(self) -> set_str"""
        return _geom_swig.Patch_getSurfsys(*args)

    def delSurfsys(*args):
        """delSurfsys(self, string id)"""
        return _geom_swig.Patch_delSurfsys(*args)

    def getIComp(*args):
        """getIComp(self) -> Comp"""
        return _geom_swig.Patch_getIComp(*args)

    def getOComp(*args):
        """getOComp(self) -> Comp"""
        return _geom_swig.Patch_getOComp(*args)

Patch_swigregister = _geom_swig.Patch_swigregister
Patch_swigregister(Patch)

class Comp(_object):
    """Proxy of C++ Comp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Comp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, string id, Geom container, double vol=0.0) -> Comp"""
        this = _geom_swig.new_Comp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_Comp
    __del__ = lambda self : None;
    def getID(*args):
        """getID(self) -> string"""
        return _geom_swig.Comp_getID(*args)

    def setID(*args):
        """setID(self, string id)"""
        return _geom_swig.Comp_setID(*args)

    def getContainer(*args):
        """getContainer(self) -> Geom"""
        return _geom_swig.Comp_getContainer(*args)

    def getVol(*args):
        """getVol(self) -> double"""
        return _geom_swig.Comp_getVol(*args)

    def setVol(*args):
        """setVol(self, double vol)"""
        return _geom_swig.Comp_setVol(*args)

    def addVolsys(*args):
        """addVolsys(self, string id)"""
        return _geom_swig.Comp_addVolsys(*args)

    def getVolsys(*args):
        """getVolsys(self) -> set_str"""
        return _geom_swig.Comp_getVolsys(*args)

    def delVolsys(*args):
        """delVolsys(self, string id)"""
        return _geom_swig.Comp_delVolsys(*args)

    def getIPatches(*args):
        """getIPatches(self) -> set_ptc"""
        return _geom_swig.Comp_getIPatches(*args)

    def getOPatches(*args):
        """getOPatches(self) -> set_ptc"""
        return _geom_swig.Comp_getOPatches(*args)

Comp_swigregister = _geom_swig.Comp_swigregister
Comp_swigregister(Comp)

class Tetmesh(Geom):
    """Proxy of C++ Tetmesh class"""
    __swig_setmethods__ = {}
    for _s in [Geom]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tetmesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Geom]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tetmesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int nverts, unsigned int ntets, unsigned int ntris) -> Tetmesh
        __init__(self, vector_dbl verts, vector_uint tets, vector_uint tris=std::vector<unsigned int >()) -> Tetmesh
        __init__(self, vector_dbl verts, vector_uint tets) -> Tetmesh
        __init__(self, vector_dbl verts, vector_uint tris, vector_dbl tri_areas, 
            vector_dbl tri_norms, vector_int tri_tet_neighbs, 
            vector_uint tets, vector_dbl tet_vols, 
            vector_dbl tet_barycs, vector_uint tet_tri_neighbs, 
            vector_int tet_tet_neighbs) -> Tetmesh
        """
        this = _geom_swig.new_Tetmesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_Tetmesh
    __del__ = lambda self : None;
    def setVertex(*args):
        """setVertex(self, unsigned int vidx, double x, double y, double z)"""
        return _geom_swig.Tetmesh_setVertex(*args)

    def setTri(*args):
        """
        setTri(self, unsigned int tidx, unsigned int vidx0, unsigned int vidx1, 
            unsigned int vidx2)
        """
        return _geom_swig.Tetmesh_setTri(*args)

    def setTet(*args):
        """
        setTet(self, unsigned int tidx, unsigned int vidx0, unsigned int vidx1, 
            unsigned int vidx2, unsigned int vidx3)
        """
        return _geom_swig.Tetmesh_setTet(*args)

    def setup(*args):
        """setup(self)"""
        return _geom_swig.Tetmesh_setup(*args)

    def isSetupDone(*args):
        """isSetupDone(self) -> bool"""
        return _geom_swig.Tetmesh_isSetupDone(*args)

    def getVertex(*args):
        """getVertex(self, unsigned int vidx) -> vector_dbl"""
        return _geom_swig.Tetmesh_getVertex(*args)

    def countVertices(*args):
        """countVertices(self) -> unsigned int"""
        return _geom_swig.Tetmesh_countVertices(*args)

    def getTri(*args):
        """getTri(self, unsigned int tidx) -> vector_uint"""
        return _geom_swig.Tetmesh_getTri(*args)

    def countTris(*args):
        """countTris(self) -> unsigned int"""
        return _geom_swig.Tetmesh_countTris(*args)

    def getTriArea(*args):
        """getTriArea(self, unsigned int tidx) -> double"""
        return _geom_swig.Tetmesh_getTriArea(*args)

    def getTriBarycenter(*args):
        """getTriBarycenter(self, unsigned int tidx) -> vector_dbl"""
        return _geom_swig.Tetmesh_getTriBarycenter(*args)

    def getTetQualityRER(*args):
        """getTetQualityRER(self, unsigned int tidx) -> double"""
        return _geom_swig.Tetmesh_getTetQualityRER(*args)

    def getTriNorm(*args):
        """getTriNorm(self, unsigned int tidx) -> vector_dbl"""
        return _geom_swig.Tetmesh_getTriNorm(*args)

    def getTriPatch(*args):
        """getTriPatch(self, unsigned int tidx) -> TmPatch"""
        return _geom_swig.Tetmesh_getTriPatch(*args)

    def getTriTetNeighb(*args):
        """getTriTetNeighb(self, unsigned int tidx) -> vector_int"""
        return _geom_swig.Tetmesh_getTriTetNeighb(*args)

    def getTriBoundary(*args):
        """getTriBoundary(self) -> vector_int"""
        return _geom_swig.Tetmesh_getTriBoundary(*args)

    def getTet(*args):
        """getTet(self, unsigned int tidx) -> vector_uint"""
        return _geom_swig.Tetmesh_getTet(*args)

    def countTets(*args):
        """countTets(self) -> unsigned int"""
        return _geom_swig.Tetmesh_countTets(*args)

    def getTetVol(*args):
        """getTetVol(self, unsigned int tidx) -> double"""
        return _geom_swig.Tetmesh_getTetVol(*args)

    def getTetBarycenter(*args):
        """getTetBarycenter(self, unsigned int tidx) -> vector_dbl"""
        return _geom_swig.Tetmesh_getTetBarycenter(*args)

    def getTetComp(*args):
        """getTetComp(self, unsigned int tidx) -> TmComp"""
        return _geom_swig.Tetmesh_getTetComp(*args)

    def getTetTriNeighb(*args):
        """getTetTriNeighb(self, unsigned int tidx) -> vector_uint"""
        return _geom_swig.Tetmesh_getTetTriNeighb(*args)

    def getTetTetNeighb(*args):
        """getTetTetNeighb(self, unsigned int tidx) -> vector_int"""
        return _geom_swig.Tetmesh_getTetTetNeighb(*args)

    def findTetByPoint(*args):
        """findTetByPoint(self, vector_dbl p) -> int"""
        return _geom_swig.Tetmesh_findTetByPoint(*args)

    def getBoundMin(*args):
        """getBoundMin(self) -> vector_dbl"""
        return _geom_swig.Tetmesh_getBoundMin(*args)

    def getBoundMax(*args):
        """getBoundMax(self) -> vector_dbl"""
        return _geom_swig.Tetmesh_getBoundMax(*args)

    def getMeshVolume(*args):
        """getMeshVolume(self) -> double"""
        return _geom_swig.Tetmesh_getMeshVolume(*args)

Tetmesh_swigregister = _geom_swig.Tetmesh_swigregister
Tetmesh_swigregister(Tetmesh)

class TmComp(Comp):
    """Proxy of C++ TmComp class"""
    __swig_setmethods__ = {}
    for _s in [Comp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TmComp, name, value)
    __swig_getmethods__ = {}
    for _s in [Comp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TmComp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, string id, Tetmesh container, vector_uint tets) -> TmComp"""
        this = _geom_swig.new_TmComp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_TmComp
    __del__ = lambda self : None;
    def setVol(*args):
        """setVol(self, double vol)"""
        return _geom_swig.TmComp_setVol(*args)

    def getAllTetIndices(*args):
        """getAllTetIndices(self) -> vector_uint"""
        return _geom_swig.TmComp_getAllTetIndices(*args)

    def countTets(*args):
        """countTets(self) -> unsigned int"""
        return _geom_swig.TmComp_countTets(*args)

    def isTetInside(*args):
        """isTetInside(self, vector_uint tet) -> vector_bool"""
        return _geom_swig.TmComp_isTetInside(*args)

    def getBoundMin(*args):
        """getBoundMin(self) -> vector_dbl"""
        return _geom_swig.TmComp_getBoundMin(*args)

    def getBoundMax(*args):
        """getBoundMax(self) -> vector_dbl"""
        return _geom_swig.TmComp_getBoundMax(*args)

TmComp_swigregister = _geom_swig.TmComp_swigregister
TmComp_swigregister(TmComp)

class TmPatch(Patch):
    """Proxy of C++ TmPatch class"""
    __swig_setmethods__ = {}
    for _s in [Patch]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TmPatch, name, value)
    __swig_getmethods__ = {}
    for _s in [Patch]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TmPatch, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(self, string id, Tetmesh container, vector_uint tris, Comp icomp, 
            Comp ocomp=0) -> TmPatch
        """
        this = _geom_swig.new_TmPatch(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_swig.delete_TmPatch
    __del__ = lambda self : None;
    def setArea(*args):
        """setArea(self, double area)"""
        return _geom_swig.TmPatch_setArea(*args)

    def getAllTriIndices(*args):
        """getAllTriIndices(self) -> vector_uint"""
        return _geom_swig.TmPatch_getAllTriIndices(*args)

    def isTriInside(*args):
        """isTriInside(self, vector_uint tet) -> vector_bool"""
        return _geom_swig.TmPatch_isTriInside(*args)

TmPatch_swigregister = _geom_swig.TmPatch_swigregister
TmPatch_swigregister(TmPatch)



